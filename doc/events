.. 
    Copyright © 2007-2012, Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

Startup and shutdown
--------------------

startup
	-- triggered after loading initial modules and parsing the
	   configuration files.

shutdown
	-- closing down

Module load/unload
------------------

module load NAME [params...]
	-- a module has been loaded (and can be used)

module unload NAME [params...]
	-- a module will be unloaded (any usage needs to be dropped)

Monitor
-------

monitor start NAME
	-- The system will start monitoring this value. An error while
	   handling this event will prevent the monitoring from happening.

monitor stop NAME
	-- The system has stopped monitoring this value because a direct
	   command stopped the monitor. The handler may not directly
	   re-start this monitor.

monitor error NAME
	-- The system has detected an error monitoring this value.
	   Monitoring is stopped. Restarting the monitor is OK from within
	   the handler, but you should add some kind of back-off.

monitor overrun NAME
	-- The monitor's input queue did not process the last value before the
	   next came in.

monitor step NAME
	-- The difference between the old and new value of this monitor is
	   too large.
	   If this event triggers an error, no "value" event will be
	   generated.

monitor update NAME
	-- Monitoring has determined that the new value for NAME is VAL.
	   While this handler is running, the monitor's "var monitor"
	   variable will still contain the old value!

	   If this handler triggers an error, the new value will not be
	   stored.

monitor low NAME
	-- The monitored value is lower than the specified limit.

monitor high NAME
	-- The monitored value is higher than the specified limit.

monitor low_ok NAME
	-- The monitored value is no longer lower than the specified limit.

monitor high_ok NAME
	-- The monitored value is no longer higher than the specified limit.

The next two events will only be sent when a passive monitor (which is
fed by "set monitor" statements instead of actively being subclassed) is
running.

monitor checking NAME
	-- The monitored value needs an update.

monitor checked NAME
	-- The monitored value has been updated successfully.

net
---

The NAMEs here contain a trailing connection identifier when referring to
an incoming connection, as there may be more than one concurrent
connection.

net connect NAME…
	-- This connection is up. Note that reading from this connection
	   starts after this event has concluded.

net disconnect NAME…
	-- This connection is down.

net error NAME…
    -- This connection could not be established.

net recv NAME…
	-- The text «whatever» has been received.
	   Arguments are split by whitespace and stored in the event's `data`
	   field.

Note that a wildcard handler which listens on every conceivable
connection does not make sense; nevertheless you probably shouldn't
name your net connection “connect”. ☺

I/O
---

input change NAME…
	-- an input has changed
	   The value is sent in the `value` attribute.

output change NAME…
	-- the output changes. The old and new values are stored in the event's
	   `prev_value` and `value`, respectively.

output error NAME…
	-- Changing the output resulted in an error.

PWM
---

pwm change NAME…
    -- change the pulse level.
	   The new state is in the event's `value` parameter.

pwm error NAME…
    -- A "pwm set" event caused an error.
       (That error was reported in detail, just before triggering this event.)

State
-----

state new NAME…
state delete NAME…
state change NAME…
	-- a state is created / deleted / changes.
	   The old and/or new values are stored in the event's prev_value /
	   value fields, respectively.

FS20
----

fs20 state  STATE EXT  NAME…
	-- A command has been received. "STATE" is the command that's being
	   sent to the named device. This includes messages like "toggle" or
	   "dim_updown".
	   
	   EXT is the command's extension byte, or "-" of none has been sent.
	
input fs20 NAME…
	-- A command has been received. The command's message (and extension,
	   if present) are stored in the event's `value` and `ext` attributes.

fs20 unknown prefix
	-- A FS20 command with an unknown message type prefix has been received.

fs20 unknown device
	-- A FS20 command with an unknown device code has been received.

fs20 unknown function HOUSECODE FCODE data
	-- A FS20 command with an unknown function code has been received.

fs20 unknown hex
	-- A FS20 command with non-hexadecimal input has been received.

fs20 unknown hc
	-- A FS20 command with an unknown house code / checksum combination has
	   been received.
	   
	   The code is sent as the `hc` attribute.
	   `checksum` is the difference between the received and calculated
	   checksums. Switches use 6, heating 12. Commands forwarded by
	   repeaters are currently *not* handled. (Repeaters increment the
	   checksum of packets they forward.)

fs20 error TEXT NAME…
	-- Error messages (on stderr) from any external commands are
	   reported by this event. NAME is the sender or receiver which
	   generated the message.

	   Note that all external error messages need to be terminated by a
	   linefeed. CR is also used, but documents progress, i.e. the fact
	   that the external job is still alive and not hanging.
	   If messages are not printed atomically, leading parts of error
	   messages may be cut off by interleaved progress messages.
	   (This happens *very* rarely, if ever.)

fs20 wedged NAME
	-- The named external sender or receiver has stopped reporting progress.
	   It will be killed and restarted automatically.

fs20 em
-------

These are measurement devices. They have their own (quite limited)
protocol codes.

fs20 unknown em
    -- this device ID is unknown.

fs20 unknown em unregistered
    -- device ‹type›, ID ‹id›, reports that it measured ‹datum› as ‹value›.

    Example:

        fs20¦unknown¦em¦unregistered
			type=thermo_hygro
			code=2
			temperature=20.3

fs20 em name…
    -- the device registered as ‹name…› reported something.

    Example:

    fs20¦em¦inside¦livingroom
		temperature=19.3
		humidity=51

fs20 conflict em sync
    -- The data packet fits more than one timeslot, but the values are
       too close so MoaT cannot reliably associate the data to a
       single device.

fs20 conflict em unsync
    -- The data packet fits no running timeslot. There are multiple
       unsynced timeslots and the values are too close, so MoaT
       cannot reliably associate the data to a single device.

fs20 conflict em untimed
    -- The data packet fits no running timeslot. There are multiple
       devices without timeslot and the values are too close, so
       MoaT cannot reliably associate the data to a single device.

fs20 unknown em untimed
    -- The data packet fits no running timeslot. There are no
       devices without timeslot, so MoaT cannot associate
       the data to any device.

fs20 unknown em unregistered
    -- No devices for that type and ID have been registered.


wago
----

wago up NAME
	-- the server is connected

wago down NAME
	-- the server has been disconnected

wago message TEXT NAME
	-- a message from the controller arrived

wago on NAME
	-- an input changed state to ON

wago off NAME
	-- an input changed state to OFF

wago set on NAME
	-- an output changed state to ON

wago set off NAME
	-- an output changed state to OFF

wago timer on NAME
	-- a timed output change to ON occurred

wago timer off NAME
	-- a timed output change to OFF occurred

wago timer error MESSAGE NAME
	-- the timer was aborted
	   most likely because the output was changed externally

wago count NUMBER NAME
	-- a counter message was received

Wait
----

wait start TIME NAME
	-- a wait has been started.

wait update TIME NAME
	-- the wait time has been changed.

wait done TIME NAME
	-- the wait has completed.

wait cancel TIME NAME
	-- the wait is cancelled.

TIME always refers to the time when the event will be triggered
(Unix seconds).

OneWire (OWFS)
--------------

These are low-level events, reporting a particular device. Usually you
are interested in actual measurements, reported in "data" events.

onewire connect NAME
	-- the connection to this server is up.

onewire disconnect NAME
	-- the server connection has failed.

	Note that retries are automatic.

onewire broken NAME
	-- communication with this bus has failed.
	   (It will be retried automatically.)

onewire wedged NAME
	-- communication with this bus seems to be impossible
	   (30 consecutive BUSY replies from the server. Restart it!)

onewire scanning NAME
	-- the bus will be scanned after this event has been handled.
	   An error during event handling will prevent scanning.

onewire scanned NAME
	-- scanning of this bus has completed.
	   "old": Number of devices that were on the bus previously
	   "new": Number of newly-discovered devices
	   "num": Number of devices now connected to, on this bus

onewire device new ID
	-- A device with the given type has appeared on a 1-wire bus
	   for the first time. This event is followed by an "up" event for
	   the same device.
	   "typ": the device type
	   "id": its ID

onewire device up ID
	-- The device with the given type is now available.
	   "typ": the device type
	   "id": its ID

onewire device down ID
	-- The device with the given type is no longer available.
	   This may be a temporary condition. Until you see an "up" event,
	   however, trying to communicate with the device will cause an
	   error.
	   "typ": the device type
	   "id": its ID

onewire bus up
	-- A new 1wire bus has shown up.
	   "bus": the interface this is connected to
	   "path": the bus path, may be behind a 1wire switch

onewire bus down
	-- A 1wire bus has vanished.
	   "bus": the interface this is connected to
	   "path": the bus path, may be behind a 1wire switch

onewire alarm new ID
	-- A 1wire device starts showing up in CONDITIONAL SEARCH
	   which we haven't yeen yet.

onewire alarm on ID
	-- A 1wire device starts showing up in CONDITIONAL SEARCH.
	   "bus": the interface this is connected to
	   "path": the bus path, may be behind a 1wire switch

onewire alarm off ID
	-- A 1wire device is no longer listed in CONDITIONAL SEARCH.
	   "bus": the interface this is connected to
	   "path": the bus path, may be behind a 1wire switch

timing
------

wait start NAME…
	-- A wait event has started. `end_time` tells when it'll stop.

wait error NAME…
	-- There was a problem with the wait task.

wait done NAME…
	-- The wait period has concluded.

wait cancel NAME…
	-- The wait period has been terminated prematurely.

timeslot begin NAME
    -- the timeslot has been reached.
       Note that this event is not sent when you explicitly re-sync the
       timeslot while it's in "next" state. This is intentional -- we
       can't send an event into the past.

timeslot end NAME
    -- the timeslot has ended.

timeslot error NAME
    -- One of the other slot events has raised an error.
       The timeslot is stopped.

AMQP
----

amqp connect NAME…
	-- the connection to AMQP has been established.
	   Note that this will not start an AMQP listener; you need to do that
	   with "start amqp NAME…" after setting up your channels etc.

amqp error NAME…
	-- the connection to AMQP could not be established.

amqp start NAME…
	-- the system is now listening to this connection.

amqp stop NAME…
	-- the system is no longer listening to this connection.

amqp disconnect NAME…
	-- the connection to AMQP has been terminated.

