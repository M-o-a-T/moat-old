.. 
    Copyright © 2007-2008, Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

Startup and shutdown
--------------------

startup
	-- triggered after loading initial modules and parsing the
	   configuration files.

shutdown
	-- closing down

Module load/unload
------------------

module load NAME [params...]
	-- a module has been loaded (and can be used)

module unload NAME [params...]
	-- a module will be unloaded (any usage needs to be dropped)

Monitor
-------

monitor start NAME
	-- The system will start monitoring this value. An error while
	   handling this event will prevent the monitoring from happening.

monitor stop NAME
	-- The system has stopped monitoring this value because a direct
	   command stopped the monitor. The handler may not directly
	   re-start this monitor.

monitor error NAME
	-- The system has detected an error monitoring this value.
	   Monitoring is stopped. Restarting the monitor is OK from within
	   the handler, but you should add some kind of back-off.

monitor alarm VAL NAME
	-- The difference between the old and new value of this monitor is
	   too large.
	   If this event triggers an error, no "value" event will be
	   generated.

monitor value VAL NAME
	-- Monitoring has determined that the new value for NAME is VAL.
	   While this handler is running, the monitor's "var monitor"
	   variable will still contain the old value!

	   If this handler triggers an error, the new value will not be
	   stored.

monitor low NAME
	-- The monitored value is lower than the specified limit.

monitor high NAME
	-- The monitored value is higher than the specified limit.

monitor low_ok NAME
	-- The monitored value is no longer lower than the specified limit.

monitor high_ok NAME
	-- The monitored value is no longer higher than the specified limit.

The next two events will only be sent when a passive monitor (which is
fed by "set monitor" statements instead of actively being subclassed) is
running.

monitor checking NAME
	-- The monitored value needs an update.

monitor checked NAME
	-- The monitored value has been updated successfully.

net
---

net connect NAME
	-- This connection is up.

net disconnect NAME
	-- This connection is down.

net NAME whatever...
	-- The text «whatever» has been received.
	   Arguments are split by whitespace.

Note that a wildcard handler which listens on every conceivable
connection does not make sense; nevertheless you probably shouldn't
name your net connection “connect”. ☺

PWM
---

pwm set on|off NAME…
    -- change the pulse level.

pwm error NAME…
    -- A "pwm set" event caused an error.
       (That error was reported in detail, just before triggering this event.)

State
-----

state OLD NEW NAME
	-- a state changes.
	   OLD is "-" if the state is newly created.
	   NEW is "-" if the state is deleted.

	   This event is triggered synchronously; while it executes, new
	   state changes on the same NAME are forbidden and will cause an
	   error.

FS20
----

fs20 state  STATE EXT  NAME
	-- A command has been received. "STATE" is the command that's being
	   sent to the named device. This includes messages like "toggle" or
	   "dim_updown".
	   
	   EXT is the command's extension byte, or "-" of none has been sent.
	
fs20 unknown device HOUSECODE DEVCODE data
	-- A FS20 command with an unknown device code has been received
	   on the HOUSECODE address.

fs20 unknown function HOUSECODE FCODE data
	-- A FS20 command with an unknown function code has been received
	   on the HOUSECODE address.

fs20 unknown HOUSECODE QSDIFF data
	-- A FS20 command with an unknown house code / checksum has been
	   received on the HOUSECODE address.
	   
	   QSDIFF is the difference between the received and calculated
	   checksums. Switches use 6, heating 12. Commands forwarded by
	   repeaters are currently *not* handled. (Repeaters increment the
	   checksum of packets they forward.)

fs20 error TEXT NAME
	-- Error messages (on stderr) from any external commands are
	   reported by this event. NAME is the sender or receiver which
	   generated the message.

	   Note that all external error messages need to be terminated by a
	   linefeed. CR is also used, but documents progress, i.e. the fact
	   that the external job is still alive and not hanging.
	   If messages are not printed atomically, leading parts of error
	   messages may be cut off by interleaved progress messages.
	   (This happens *very* rarely, if ever.)

fs20 wedged NAME
	-- The named external sender or receiver has stopped reporting progress.
	   It will be killed and restarted automatically.

fs20 em
-------

These are measurement devices. They have their own (quite limited)
protocol codes.

fs20 em unknown id data
    -- this device ID is unknown.

fs20 em type id datum value
    -- device ‹type›, ID ‹id›, reports that it measured ‹datum› as ‹value›.

    Example:

        fs20¦em¦thermo_hygro¦2¦temperature¦20.3

fs20 unknown em type id data
    -- this device has not been registered yet.

fs20 em kind value name…
    -- the device registered as ‹name…› reported something.

    Example:

    fs20 em temperature 19.3 inside livingroom

Wait
----

wait start TIME NAME
	-- a wait has been started.

wait update TIME NAME
	-- the wait time has been changed.

wait done TIME NAME
	-- the wait has completed.

wait cancel TIME NAME
	-- the wait is cancelled.

TIME always refers to the time when the event will be triggered
(Unix seconds).

OneWire (OWFS)
--------------

These are low-level events, reporting a particular device. Usually you
are interested in actual measurements, reported in "data" events.

onewire connect NAME
	-- the connection to this server is up.

onewire disconnect NAME
	-- the server connection has failed.

	Note that retries are automatic.

onewire broken NAME
	-- communication with this bus has failed.
	   (It will be retried automatically.)

onewire wedged NAME
	-- communication with this bus seems to be impossible
	   (30 consecutive BUSY replies from the server. Restart it!)

onewire scanning NAME
	-- the bus will be scanned after this event has been handled.
	   An error during event handling will prevent scanning.

onewire scanned NAME del new sum
	-- scanning of this bus has completed.
	   "del": Number of devices that were dropped
	   "new": Number of newly-discovered devices
	   "sum": Number of devices now connected to on the bus

onewire new TYPE DEVICE
	-- The device with the given type has appeared on a 1-wire bus
	   for the first time. This event is followed by an "up" event for
	   the same device.

onewire up TYPE DEVICE
	-- The device with the given type is now available.

onewire down TYPE DEVICE
	-- The device with the given type is no longer available.
	   This may be a temporary condition. Until you see an "up" event,
	   however, trying to communicate with the device will cause an
	   error.

timeslot
--------

timeslot begin NAME
    -- the timeslot has been reached.
       Note that this event is not sent when you explicitly re-sync the
       timeslot while it's in "next" state. This is intentional -- we
       can't send an event into the past.

timeslot end NAME
    -- the timeslot has ended.

timeslot error NAME
    -- One of the other slot events has raised an error.
       The timeslot is stopped.


