Startup and shutdown
--------------------

startup
	-- triggered after loading initial modules and parsing the
	   configuration files.

shutdown
	-- closing down

Module load/unload
------------------

module load NAME [params...]
	-- a module has been loaded (and can be used)

module unload NAME [params...]
	-- a module will be unloaded (any usage needs to be dropped)

Monitor
-------

monitor start NAME
	-- The system will start monitoring this value. An error while
	   handling this event will prevent the monitoring from happening.

monitor stop NAME
	-- The system has stopped monitoring this value because a direct
	   command stopped the monitor. The handler may not directly
	   re-start this monitor.

monitor error NAME
	-- The system has detected an error monitoring this value.
	   Monitoring is stopped. Restarting the monitor is OK from within
	   the handler, but you should add some kind of back-off.

monitor alarm VAL NAME
	-- The difference between the old and new value of this monitor is
	   too large.
	   If this event triggers an error, no "value" event will be
	   generated.

monitor value VAL NAME
	-- Monitoring has determined that the new value for NAME is VAL.
	   While this handler is running, the monitor's "var monitor"
	   variable will still contain the old value!

	   If this handler triggers an error, the new value will not be
	   stored.

monitor low NAME
	-- The monitored value is lower than the specified limit.

monitor high NAME
	-- The monitored value is higher than the specified limit.

monitor low_ok NAME
	-- The monitored value is no longer lower than the specified limit.

monitor high_ok NAME
	-- The monitored value is no longer higher than the specified limit.

The next two events will only be sent when a passive monitor (which is
fed by "set monitor" statements instead of actively being subclassed) is
running.

monitor checking NAME
	-- The monitored value needs an update.

monitor checked NAME
	-- The monitored value has been updated successfully.


State
-----

state OLD NEW NAME
	-- a state changes.
	   OLD is "-" if the state is newly created.
	   NEW is "-" if the state is deleted.

	   This event is triggered synchronously; while it executes, new
	   state changes on the same NAME are forbidden and will cause an
	   error.

Wait
----

wait start TIME NAME
	-- a wait has been started.

wait update TIME NAME
	-- the wait time has been changed.

wait done TIME NAME
	-- the wait has completed.

wait cancel TIME NAME
	-- the wait is cancelled.

TIME always refers to the time when the event will be triggered
(Unix seconds).

OneWire (OWFS)
--------------

These are low-level events, reporting a particular device. Usually you
are interested in actual measurements, reported in "data" events.

onewire connect NAME
	-- the connection to this server is up.

onewire disconnect NAME
	-- the server connection has failed.

	Note that retries are automatic.

onewire broken NAME
	-- communication with this bus has failed.
	   (It will be retried automatically.)

onewire scanning NAME
	-- the bus will be scanned after this event has been handled.
	   An error during event handling will prevent scanning.

onewire scanned NAME del new sum
	-- scanning of this bus has completed.
	   "del": Number of devices that were dropped
	   "new": Number of newly-discovered devices
	   "sum": Number of devices now connected to on the bus

onewire new TYPE DEVICE
	-- The device with the given type has appeared on a 1-wire bus
	   for the first time. This event is followed by an "up" event for
	   the same device.

onewire up TYPE DEVICE
	-- The device with the given type is now available.

onewire down TYPE DEVICE
	-- The device with the given type is no longer available.
	   This may be a temporary condition. Until you see an "up" event,
	   however, trying to communicate with the device will cause an
	   error.

