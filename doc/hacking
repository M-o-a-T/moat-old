.. 
    Copyright (C) 2007  Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

====================
How to hack HomEvent
====================


-------
Logging
-------

In addition to the 'normal' log levels, there are also a few subsystems
in HomEvenT whose logging can be turned on separately:

	scripts/daemon.py --trace=DEBUG,onewire=TRACE

This statement would enable all debugging levels for the onewire
subsystem; the console output would not actually contain these because
of the DEBUG, but you could log them separately from within HomEvenT.

The following subsystems are defined:

* onewire

  This logs all transactions betweenHomEvenT and the onewire server(s).

* parser

  Command parser, slightly higher level.

* token

  Command tokenizer, i.e. lower level.

---------
Internals
---------

Twisted
-------

First, understand Twisted, especially the Deferred concept.


Check existing code
-------------------

Second, look at a few modules. See how they work (hopefully ;-).


Don't think linearly
--------------------

Third, stop thinking in terms of linear execution. I'll give you a short
example.

The HomEvent code you write may contain things like …

	async:
		trigger event one
		wait for 10 sec
		trigger event two

… but there really is no such thing as a Python thread which sits there
patiently sleeping (or, worse, twiddling its thumbs) until ten seconds
have passed. Instead, there's a Deferred() object that has those three
command enqueued onto it (that's done by
homevent.statement.CompoundStatement.run() — and all *that* does is to
queue all the "run" methods of the sub-statements onto that Deferred
thing.

So why does the wait, well, wait?

The magic part is that modules.wait.WaitHandler.run() creates yet another
Deferred() and returns _that_, which causes Twisted to stop running the
commands in the first one until the second one returns something.

And that, incidentally, is caused by the timer going off. ☺


Statement chains
----------------

Fourth, every statement has a parent (the block above it) and a context.
These things are hierarchical and inherit their values from both the 
execution and runtime contexts. And they can be dynamic. So, all a "var
…" statement does is to add some value to its parent context.

The parser doesn't even know anything special about things like "if:".
All it knows is that some statements get to be executed immediately.
Thus the "else:" simply adds itself to the "if:" it assumes to be
present in the last slot of the parent statement. If not, it gets a
Python error because things break horribly, which it then translates
back to something understandable.

That's why the parser can be so terminally dumb.


Syntax
------

Fifth, yes, the command syntax *is* terminally stupid. That's
intentional. I don't want to invent yet another programming language or,
worse, force people to program their house in Python.

I want the thing to have minimal but understandable syntax.
See doc/SYNTAX. You don't get any simpler than that.
I don't even have arithmetic yet, simply because I don't need it yet.
(But that will change, and some "var eval" and "if eval" will eventually
happen.)

On that topic: HomEvenT understands multi-word commands by the simple
expedient of selecting for the longest common prefix. That does mean
that if you have both "load" and "load dir" commands you cannot load a
module named "dir" because that selects the wrong command. (Duh.)
In your own hacking, keep the number of conflicts to a minimum.

Also, HomEvenT has no such concept as pattern matching, string
concatenation, and whatnot. , other than a simple(-minded) "this list of
words looks the same as that one, if you disregard anything that startes
with an asterisk in the second list", which is how event matching works.
That's also intentional. Instead of convoluted single-string names, use
simple multi-part names: HomEvenT uses them for its internal objects
*everywhere*. In your own hacking, please do likewise.

Event matching also assigns variable names. Variables are interpolated
by saying "$varname". There are a couple of other expedient way to
get variables. They all start with "var". Look at the state module for
an example.

You can't assign to variables. You can, however, get a variable from a
state and change the state, which incidentally also triggers an event,
which is a good way to trigger code that causes the value to be read. ☺
Thus, that is also intentional. I want people to think in states (which
are persistent) and events (which are not), not variable values (which
may or may not be persistent, but cannot be used to sanely recover your
system state if you need to reboot your computer for some reason — not
unless you think really hard about what you're doing, which I don't want
people to force to do).


Modules
-------

Sixth, encapsulate things in loadable modules whenever possible. But
don't let those modules depend on each other.

Look at how "if:" and "while:" work as a good example. There's minimal
infrastructure for collecting and processing conditions in the main
code. Some modules implement commands that do checks (if:), and some
others provide test conditions ("if exists state").

When inventing command names, don't use compound nouns ("if
exists_state") or subsystem-specific prefixes ("externalwhatever set
foo_bar on") — use existing conventions ("if state exists", "set
externalwhatever on foo bar").

The reason for the somewhat convoluted syntax of the last command is
that variable-length stuff goes at the end, and names of things in
HomEvenT are (supposed to be) always variable-length. In other words,
your code should use "Name(event[place:])" as the lookup key.
Again, see the existing code for plenty of examples.

"Name" is defined in the homevent.base module. It's just a tuple which
knows how to print itself more nicely.


Send patches!
-------------

Seventh, patches to make HomEvenT do new shiny interesting things (or
even boring everyday things that it can't do yet) are definitely welcome!


Test test test
--------------

Last but not least: Add test cases for every module. Testing is boring
and somewhat annoying, but critically essential for stability.

If you need to talk to a remote server, try to shim it.
"nc" is your friend. Most likely you don't need any code
because you already know what's supposed to happen; if
necessary, a few random delays don't hurt if that saves
you from writing a custom daemon just to test stuff.
Just make sure that you *do* verify the intended output …

HomEvenT, right now, has a very bad test system. It simply traces
everything and then checks that the traces match. That can (and
ultimately will) be improved, but right now it's all we have.

------------
Coding Style
------------

Tabs
----

I'm using tabs, not spaces.

Yeah, yeah, I know that everybody else advocates spaces.

But tabs are good.

You can make them wider to see how the code lines up more clearly.
You can replace them with \t (temporarily of course ☺) to see that
even better. (Of course you should immediately go and refactor code
that's so convoluted!) They work in GUI editors with proportional
fonts where spaces are just too narrow to be useful visually.
I can use a dumb editor that doesn't convert tab to four spaces
without messing up my code or hacking the space bar to death
if I have to.

So there.

Encoding
--------

Absolutely every file is required to have a

	# -*- coding: utf-8 -*-

line on top. Strings with UTF-8 characters, including docstrings,
shall be marked as Unicode.

I'm somewhat annoyed at the fact that Python's standard encoding is still
ASCII instead of UTF-8. I changed that on my system, and frankly HomEvenT
doesn't work otherwise, simply because I have better things to do than
to sprinkle .encode("utf-8") into every print()'s and write()'s argument
list – especially when the latter must only be done when talking to the
outside world.

The installation puts a sitecustomize.py which effects that change
someplace where Python can find it when started by HomEvent's
init script.

Documentation
-------------

I'm using “typographic” ‘quotes’ for stuff that's, well, quoted.
(Anybody who still tries to use standalone grave/acute apostrophes
will be drawn and quartered. These things belong on top of letters
and nowhere else.)

‹Angle quotes› look much better than less/greater-than signs for denoting
parameters. An em-dash (—) makes more sense than the stupid double hyphens
that are left over from typewriters.

If you don't know how to type any of those, learn how, or pop up a
Unicode map and find them there for copy+paste. If you get confused
by that, try a game of 乒乓. ☺

Of course, in the interest of being able to sanely edit texts like this
with ‘normal’ editors, lines still get wrapped at 75 chars or so and
paragraphs still get separated by two linefeeds. Can't have everything. Yet.

Other
-----

I tend to use CamelCase class names and underline_separated methods.

๛
