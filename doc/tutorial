.. 
    Copyright © 2007-2008, Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

=================
MoaT Tutorial
=================

-----
Intro
-----

This tutorial teaches you some basic concepts of MoaT.

It doesn't interface with the real world; instead, it tries to introduce
you to the way MoaT works.

It is not a command reference. See the “modules” documentation for that.

it is not a syntax reference. See the “syntax” documentation for that.

You can play with MoaT by typing “make i”, then “help”.

Basic command syntax is described in the “syntax” document.
Read that before continuing.


Switches and devices and stuff
------------------------------

Don't exist, as far as MoaT is concerned.

This may be a rather strange statement, given that MoaT is all about
home control, which is a sophisticated way of turning a device (like a
lamp) on and off when you press a switch, so, like, duh?

Don't worry, I'll explain.

MoaT is not about reading the state of a switch from *somewhere* and
somehow, magically, turning off a lamp *somewhere* *else*.

That's incidental.

The main point isn't state, it's change of state. The fact that the switch
is on is not interesting. Often, you can't even find out.

What's interesting is the fact that the switch state changed. MoaT
then reacts to that somehow. One of the reactions may well be "send a
message to something-or-other that'll turn on a lamp".

How MoaT learns about that change and how it can control external
devices is a question that's answered adequately (I hope) in the “modules”
documentation. This document is not about specific modules; here,
I address the generic structure of how to control things in a sane
manner. Hopefully.


Events
------

MoaT is, as the name implies, based on the central concept of an
event. Something happens, and MoaT reacts to it.

Example: Somebody presses the light switch. The light … lights up. ☺

Except, perhaps, if the alarm system is activated. Then, *all* the light
go on, and the siren, and the call to Security. ☹

Or except if it's an outside light and it's daylight.

Anyway, after the light has been on for some time, we might want it to
go off again on its own. Or when the dark storm clouds have gone away
and it's bright enough again. Or, surprise, when somebody pushes the
"off" switch.

All of the above can be represented by two things: "Events" and
"States". Events occur when something happens. States are what
the system knows about the world.

Changing a state is also an event in itself. Or at least it can be.
We'll get to that shortly.

For the purpose of this tutorial, we don't have any outside world that
can trigger events, but we have a "trigger" statement which can simulate
one.

There's an "on event" statement which we can use to listen for events.

We're going to use the "log" statement to simulate changing the outside
world.

A complete list of pre-defined events is available in the “events”
documentation file.

Simple case
-----------

Make the light go on.

	>> load trigger
	>> load logging
	>> load on_event
	>> log debug

	# let the external switch cause "pushed on sw1" and 
	# "pushed off sw1" events
	>> on pushed on sw1:
		log DEBUG "turn on lamp1"
	>> on pushed off sw1:
		log DEBUG "turn off lamp1"
	.
	>> trigger pushed on sw1
	DEBUG> turn on lamp1

That was easy, but you don't need a computer for that.


Toggle switches
---------------

The first complication is that push-button switches are easier to do
than on/off switches when you talk to computers, because the computer
only needs to understand one kind of event (a button is pressed) instead
of two (switch on vs. switch off). So are remote controls, because the
number of buttons on them is limited; we'd like to be able to control
four lights with a four-button remote, not just two. Of course, this
pre-supposes that the person holding the remote can easily determine
the state of the device they want to control.

On the other hand, while toggle relays (to control the lights) do exist,
they're more expensive, less reliable, and the computer never really
knows what their actual state is unless it has a light sensor next to
the lamp. This is bad.

Thus, we need to remember what the state is supposed to be. Sometimes
the external hardware does that for us (i.e., you can ask the relay
controller whether Relay#5 is currently on or off), but not always — and
frankly, I want the computer to be in charge of the external gizmos,
not the other way 'round.

Fortunately, there's a module for state handling.

Let's improve the previous example:

	>> load state
	>> set state off lamp1
	>> on pushed toggle sw1:
		if state on lamp1:
			set state off lamp1
			log DEBUG "turn off lamp1"
		else:
			set state on lamp1
			log DEBUG "turn on lamp1"
	.
	>> trigger pushed toggle sw1
	DEBUG> turn on lamp1
	>> trigger pushed toggle sw1
	DEBUG> turn off lamp1

That was almost too easy, but we're not done yet.


Modularization
--------------

For starters, most systems aren't quite that simple: you want more
switches, some of which might control more than one lamp. It's not a
good idea to give all your switches the same name even if they happen to
do the same thing *now*: you can't change things later.

The easy solution would be to duplicate the above code a whole lot,
but that's not a good idea. You lose track of what-does-what rather
easily, when you do change stuff you forget a crucial place or two,
and a year later you discover that turning off the bathroom light also
turns on the central heating — so that's why you're sweating in bed all
the time. Oops.

A better solution hangs off noting the fact that the above event
statements control two things — they set the internal state *and*
switch the external lamp. We need to separate that.

For starters, we can divorce the idea "the switch controls the lamp"
from "the lamp gets turned on or off":

	>> on pushed toggle sw1:
		trigger toggle lamp1
	.
	>> on toggle lamp1:
		if state on lamp1:
			set state off lamp1
			log DEBUG "turn off lamp1"
		else:
			set state on lamp1
			log DEBUG "turn on lamp1"
	.

Now the switch part looks like it's handled. The lamp part still looks
like it needs polishing, though, because if you have 100 lamps …

Fortunately, events can have placeholders. They look like this:

	>> on toggle \*lamp:
		if not exists state $lamp:
			set state off $lamp
		if state on $lamp:
			set state off $lamp
			log DEBUG "turn off" $lamp
		else:
			set state on $lamp
			log DEBUG "turn on" $lamp
	.

That works for every lamp there is, and it even auto-creates an initial
state if you forgot to do that manually (otherwise you'll get a cryptic
error message instead of a lit lamp).

Note that the quoting changed in the "log DEBUG" statements. The reason
for that is the MoaT is stupid by design, and replaces those $things
only when they're on their own.

Oops
----

Unfortunately, that simple "on toggle" wildcard means that if we ever
want to toggle things that are not lamps, the whole thing will get
horribly confused.

There's no way to say "on toggle lamp*lamp" or whatever, in order to
react only to events whose names start with the four characters "lamp".
That's intentional, because there's a better way: after all, nobody said
event names (and state names) can only consist of one word.

	>> on pushed toggle sw1:
		trigger toggle lamp lamp1
	.
	>> on toggle lamp \*lamp:
		if not exists state lamp $lamp:
			set state off lamp $lamp
		if state on lamp $lamp:
			set state off lamp $lamp
			log DEBUG "turn off lamp" $lamp
		else:
			set state on $lamp
			log DEBUG "turn on lamp" $lamp
	.

That's better.

State change events
-------------------

However, there's still the problem that everywhere we change a lamp, we
must not forget to also change the corresponding state, and vice
versa. That's still tedious and error-prone.

The solution is that state changes also trigger events, which get
created by MoaT internally. Thus, we can do this instead:

	>> on toggle lamp \*lamp:
		if not exists state lamp $lamp:
			set state off lamp $lamp
		if state on lamp $lamp:
			set state off lamp $lamp
		else:
			set state on $lamp
	
	on state change lamp \*lamp:
		if equal $state on:
			log DEBUG "turn on lamp" $lamp
		else:
			log DEBUG "turn off lamp" $lamp
	.

Check the “events” documentation for details.

Auto-turn-off
-------------

The easy (but wrong) solution is:

	>> load wait
	>> on toggle lamp \*lamp:
		set state on $lamp
		wait: for 5 min
		set state off lamp $lamp
	.
	>> # THE ABOVE EXAMPLE WILL NOT WORK CORRECTLY

The problem is: what happens when somebody presses the switch again
during those five minutes? Do you want the thing turned off now, stay on
for the original five minutes, stay on for the new five minutes, or stay
on for a total of ten minutes? Depending on your preferences, all of
those might make sense.

What does *not* make sense is the behavior of the above code, which
makes the lamp go out five minutes after *any* button press. Consider:

* now: I push the button. Lamp lights.

* 2min: You push the button by accident because you habitually do that
  every time you enter the room. Of course, nothing happens because the
  lamp is already on.

* 3min: We leave the room. You habitually push the button because
  you forgot that the lamp is now on a timer.

* 5min: The light goes out (from the first push).

* 6min: You come back into the room and turn on the light.

* 7min: The light goes out (second push). You start to wonder why the
  damn thing won't stay on, and push the button again.

* 8min: The light goes out again (third push). You wonder what happened
  to the five-minute-promise, grumble about the randomness of it all,
  and turn the light back on.

* 11min: Oops, it's dark again. You get pissed off about the timer and
  forward your annoyance to the author of the above MoaT code.
  The author looks at the code, sees that it's “obviously correct”, deletes
  MoaT and spends a ton of money on a proprietary system. The end.


Anyway, let's continue with solutions that actually work.

First solution: turn the thing off.

	>> on toggle lamp \*lamp:
		if state on lamp $lamp:
			del wait lamp $lamp
		else:
			set state on lamp $lamp
			wait lamp $lamp:
                for 5 min
		set state off lamp $lamp
	.

(For your own interactive tests, you may want to reduce the "5 min"
timer to something less boring.)

Watch what happens. The first time the button is pressed, the "else:"
part is executed: the lamp gets turned on and the wait gets started.
The "set state off" command sits in the to-be-done queue behind the
"wait" and, well, waits.

If you press the button again before the time is up, the "del wait"
cancels the original wait statement plus (this is the important part)
everything else that was sitting around waiting for it to finish. So
the original "set state off" command is now forgotten. Fortunately,
the "set state off" from the second button press is still there.
End result: The light goes off.

We might be able to improve this code, which again becomes important
when you design bigger and better systems. The subtle point is that you
shouldn't base your decision on the current state of the lamp, but the
fact that you have a change-of-lamp-state pending. So, instead of

	if state on lamp $lamp:

you might want to write

	if exists wait lamp $lamp:

The difference obviously doesn't matter in this simple snippet;
depending on how you structure your code, one or the other way
of doing this may make more sense.

NB: The namespaces of "state" and "wait" are separate. For convenience
I've named both the same in the above code snippet, but they aren't
related in any way (except by your code, of course).


Second solution: Keep the original timeout, i.e. do nothing.

This is absurdly simple.

	>> on toggle lamp \*lamp:
		if not state on lamp $lamp:
			set state on lamp $lamp
			wait lamp $lamp:
                for 5 min
			set state off lamp $lamp
	.

Note that here, I intentionally use the "if state on" decision because I
want that switch to be dead whenever the lamp is on, not just because
I'm waiting for it to turn itself off. Again, if you have a larger
system with alternate means to control your lamp, things may be
different.


Third solution: re-start the timer.

	>> on toggle lamp \*lamp:
		if exists wait lamp $lamp:
			wait lamp $lamp:
                for 5 min
				update
		else:
			set state on lamp $lamp
			wait lamp $lamp:
                for 5 min
			set state off lamp $lamp
	.

Here I use the "update" keyword in "wait". This tells the wait
statement to play with the timeout of some wait that's already
running, instead of waiting itself.


Fourth solution: extend the time. That's easy, we just need to figure 
out when the lamp should originally have been turned off, and base our
new timeout on that. 

	>> on toggle lamp \*lamp:
		if exists wait lamp $lamp:
			var wait timeout wait lamp $lamp
			wait lamp $lamp:
                for $timeout 5 min
				update
		else:
			set state on lamp $lamp
			wait lamp $lamp:
                for $timeout 5 min
			set state off lamp $lamp
	.

You might want to implement a second timer which controls the maximum
length the lamp will stay on. Again, you decide whether that timer
should run from the first or last button press.


Alternate solution
------------------

You might want to attach the fact that the lamp should go off to the
turn-on event instead. The distinction is whether you want the lamp to
*always* turn off after five minutes, or just because it's been
switched on by somebody. If you only have manual switches, the
distinction is meaningless, but you might also have motion detectors
or daylight sensors or door switches or some other way of presence
detection.

Anyway, in principle, this is easy:

	>> on state change lamp \*lamp:
		if equal $state on:
			wait 5 min:
				name lamp $lamp
			set state off lamp $lamp
	. 
	>> # THE ABOVE EXAMPLE WILL NOT WORK

Unfortunately, this solution may or may not crash MoaT with a nasty error
message instead of turning the light off.

The reason for that disaster is that state-change events might run
synchronously, i.e. the "set state" command waits for them to complete
before continuing. If they do, they're also forbidden to change the state
they're reporting about; otherwise you could get cute endless ping-pong
effects. (Actually, that problem exists regardless … but at least the main
cause of such chains is prevented.)

The solution is an "async:" block, which is just a normal block that
doesn't force the rest of the world to wait until the statements inside
(which are still run in sequence!) complete:

	>> on state change lamp \*lamp:
		if if equal $state on:
			async:
				wait 5 min:
					name lamp $lamp
				set state off lamp $lamp
	.

Of course, you still need an “if equal $state off” part which cancels
the timer, but by now you should be able to write that yourself.

In case you're wondering: Whether state-change events run synchronously
depends on which MoaT version you're using and whether internal event
handling is shunted through an external message broker. It's best to assume
the worst-case behavior.

---------------------
More complex examples
---------------------

MoaT is supposed to be able to talk to other systems. We now implement
a connector to OpenHAB.

To do this, install RabbitMQ. Activate its MQTT module:

	rabbitmq-plugins enable rabbitmq_mqtt

Edit /etc/rabbitmq/rabbitmq.config:

	[{rabbit,        [{tcp_listeners,    [5672]}]},
	 {rabbitmq_mqtt, [
	                  {allow_anonymous,  false},
	                  {vhost,            <<"/moat">>},
	                  {exchange,         <<"moat.event">>} ]}
	].

Add users:

	rabbitmqctl add_vhost /moat
	rabbitmqctl add_user openhab WellWhatever
	rabbitmqctl add_user moat AlsoWhatever
	rabbitmqctl set_permissions -p /moat openhab ".*" ".*" ".*"
	rabbitmqctl set_permissions -p /moat moat ".*" ".*" ".*"

Configure OpenHAB to talk to MQTT:

	mqtt:openhab.url=tcp://localhost:1883
	mqtt:openhab.clientId=openhab
	mqtt:openhab.user=openhab
	mqtt:openhab.pwd=WellWhatever

	mqtt-eventbus:broker=openhab
	mqtt-eventbus:statePublishTopic=openhab/out/state/${item}
	mqtt-eventbus:commandPublishTopic=openhab/out/command/${item}
	mqtt-eventbus:stateSubscribeTopic=openhab/in/state/${item}
	mqtt-eventbus:commandSubscribeTopic=openhab/in/command/${item}

Teach MoaT to talk to AMQP:

	if not exists module amqp: load amqp

	on amqp connect bus:
			name amqp connect bus

			# do this if you want to spew logging to AMQP
			log amqp DEBUG:
					name bus logging
					exchange "moat.log"
			tell amqp bus:
					name bus events
					exchange "moat.log"
					# DO NOT tell MoaT to listen on this exchange

			# receive openhab messages
			listen amqp bus:
					name bus openhab in
					exchange "moat.event"
					topic "openhab.out.#"
					prefix hab in
					strip 3

			# send commands to openhab
			tell amqp bus:
					name bus openhab out
					filter hab out "**":
					exchange "moat.event"
					prefix openhab in
					strip 2
			
			start amqp bus

	connect amqp localhost:
			name bus
			user "/moat" moat AlsoWhatever

Now add a switch to openhab (edit the file items/CONFIG.items):

	Switch Light_Outside "Outdoor Light" ()

and assign sensible tags to the light states (in file transform/onoff.map):

	1=ON
	0=OFF

Now handle the switch in MoaT:

	on hab in command Light_Outside:
		if equal $raw ON:
				log DEBUG the light shall be turned on
		else:
				log DEBUG the light shall be turned back off

Of course, if the MoaT state changes, we need to tell openhab:

	on lights out:
		trigger hab out command Light_Outside:
			param raw OFF


Warning: Event loops
--------------------

You need to be careful about what you do with incoming events. `tell amqp`
statements are event handlers like any other, so an incoming message is
retransmitted right back out if it matches. It's very easy to create
doubly-processed events or even event loops (which quickly saturate the
bus) that way.

You should turn on rabbitmq's web interface and monitor the event rate
while you're experimenting with this. You can also use `log amqp` to send
all of MoaT's logging to an AMQP exchange, and monitor or filter these
messages at your convenience. The `amqpmon` script that comes with MoaT is
useful for this.

Splitting up MoaT
-----------------

Let's face it: MoaT is not bug-free; sometimes communication with one
subsystem hangs and you need to debug. Ideally without disrupting the rest
of the system.

Sending events for everything across AMQP seems like the ideal solution for
this, except that you now need to keep track which events are local and
which aren't (otherwise an external event would get retransmitted right
back to the message bus).

For this reason, the AMQP handlers have an additional bypass or `shunt`
mode, which works like this:

* An event that's matched by a "tell amqp … shunt" handler is not processed
  by MoaT, i.e. it is not passed to any event handlers.
  Instead, it's transmitted to the message bus and
  then forgotten about. If more than one such handler matches the event,
  only one is used (this is mostly random), so you shouldn't have
  overlapping handlers. Most people use just one, without a filter,
  and forward everything to AMQP.

* An AMQP message that's received by a "listen amqp … shunt" handler
  is processed locally. It is *not* forwarded to any other shunt handler.

So, let's add this to our "on amqp connect bus" example:

		tell amqp bus:
				name exchange out
				exchange "moat.bus"
				shunt

		# receive openhab messages
		listen amqp bus:
				name exchange in
				exchange "moat.bus"
				topic "#"
				shunt

This will not change anything, except add some latency.

Now, however, you can run another MoaT script that connects to the
"moat.bus" exchange, and alll events seen by one will be sent to the
other.

Note that this doesn't apply to anything else, i.e. non-saved states do not
get shared, you cannot directly affect the other script's wait handlers, etc.

If you split up your code along mostly-sensible lines, however, this should
not be a problem. Replicating state across MoaT instances is not simple
enough to do by MoaT script, but implementing it in MoaT itself is planned.

---------------
Do it in Python
---------------

MoaT scripts originally ran under Twisted; it was used to simplify
programming, because the strange Deferred- and Producer/Consumer-style code
required for non-blocking code with Twisted is too complicated for
non-programmers who just want to turn the lights on and off.

These days, there's asyncio or gevent (and even code to tie the two together).
Thus, MoaT will ultimately migrate away from using its own script and switch
to "real" Python.

Commands
########

exec
----

You can call Python from MoaT with the `exec` statement:

	exec foo.bar one two three:
		param what ever

which will load module `foo` and call its procedure `bar` like this:

	foo.bar(ENV, "one", "two", "three", what="ever")

Execution is synchronous, but you can always wrap it in an `async:` block.

path
----

Tell MoaT where to load Python modules from.

	path '/etc/moat'

Environment
###########

The environment passed to Python is rather limited at the moment.
More is planned.

on
--

The `on` method is a decorator to add event handling:

	@ENV.on("run","me","now", name="runme handler"):
	def handler(event):
		…

which will call the handler whenever that event happens.

trigger
-------

Trigger an event.

	import datetime
	trigger("run","me","now", some_data="some_value")

Execution of event handlers always is asynchronous.

do
--

Call back to MoaT.

	env.do("log DEBUG Calling back")
	env.do.log.DEBUG("Calling back")

You can set context values (similar to `trigger`).

If you need to use subordinate statements, prefix the keyword with an underscore.
As usual, auto-split is done on one-word arguments, for convenience:

	env.do.wait("some delay", _for="3.14 min")
	env.do.wait("some","delay", _for=(3.14,"min"))

Use an empty list as argument if you want to call a one-word sub-statement.

