.. 
    Copyright © 2007-2012, Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

====
TODO
====

So many ideas, so little time …


Documentation
=============

* Write some more tutorial stuff.


Code
====

* Logger: create singleton integers instead of constants.

* Reload: Use a command, not an interrupt

* wago monitor: mask the 'retry' stanza.

* Network error: add the destination to the error message

* RPC: support arbitrary commands, i.e. an interpreter

* restart wago connections cleanly (query the monitor list!)
  (actually implemented, but needs a test case)

* associate statements with files+lines (any StatementList)

* move log_wait to logging and make it a collection

* implement logging to SQL

* more documentation (docstring and comments) are always helpful …

* Improve monitor and ‘delta’ handling

  - high / low limits should apply to the delta

  - introduce proportional change limits etc.

* implement a PID controller

* Improve the PWM modulator
  - add minimum times for off and on
    - which either clamp the value, or get skipped when the duty cycle
      cannot reach the value, or prolong the off time
  - add override

* implement a multi-step controller (i.e. simple switch thresholds)

* Add trigger to averaging
  - send an event when the average changes by more than X in time Y

* timeslots: store last start time someplace.

* timeslots: alert after specified number of cycles without re-sync

* state handling: wait for a state to be unlocked instead of blindly
  assuming that it must be recursive; store in the context whether
  that's the case

* delayed state changes, e.g. light coming up, to prevent spurious
  events from car headlights etc.

FS20 / AVR
==========

* Document the stuff that exists now

* Create schematics for AVR

* AVR: write an 1wire client

* AVR: write send/receive interlock

* AVR: write high-level code to talk to FHT controllers

* AVR: Implement 1% sender uptime rule

* AVR: Implement send delay for low-priority signals when we're in a
  receive timeslot (collision avoidance)

* AVR: Reduce the need for three timers, one is sufficient

* Create schematics for audio

* EM:
  - Warn when timeslots start to wander too close together
  - Store last values someplace.
  - Auto-re-sync when the timeslot has been missed (i.e. only one slot
    is unsynced)

* Handle repeaters.

* Implement a FHZ1000/FHZ1300 interface.

* Ignore repeated commands.

* Add send options (how often to repeat immediately / after a delay)

* Handle heating control.

  - interface with the controller

  - control the radiators

* Handle weather devices and similar sensors.

* Audio: Implement an option to control loop speed

* Audio: implement native pulseaudio

* Audio: Figure out why portaudio is broken WRT
  - async input
  - ALSA

* Suppport weather sensors, window-open sensors, and similar gadgets.

* Split the audio processors off to their own subpackage.


Implement a web server
======================

* Grab a bunch of variables and feed a template with them

* RSS

* also serve RRD graphs while we're at it


Complex conditions
==================

	test name *a *b:
		true if TEST
		false if TEST
		true

	if test name foo bar:
		trigger baz

No, I don't want any explicit AND or OR clauses.
Simply grab the first test that applies.
Conditionals can of course work here too!

	test name *a *b:
		name dumb one
		if WHATEVER (otherwise the test doesn't apply)
		true if TEST
		false if TEST
		true
	test name *a *b:
		name dumb two
		if not WHATEVER
		return TEST (this is the end result)

Counters on how often a check has matched would be helpful.


Flexible debugging
==================

* Implement a "show on FOO" command that will display all "FOO"
  events to the current output


Help
====

Improve the help messages.


Dump config
===========

Each module should be able to print some text that will, when read back
in, re-create the system state as accurately as possible.

* order is important: modules, then event handlers, then everything else,
  except that connections are last

  - wait handlers cannot be restored because there's no way to sanely
    jump back into the execution structure

  - need to require that wait handlers get properly restarted by code

* set a mode that will update existing same-name entries, instead of
  having to destructively replace them

* serialization of a command that can be fed to an interpreter

LIRC
====

* Recognize infrared commands (and send them).

  - connect to /dev/lircd, or a remote socket

* generate LIRC commands 

  - this requires that the lircd server connects to *us*.


net
===

* allow more than one connection (incoming)

  - send to all of them


Parser
======

* Write a (yapps2-based) parser with decent grammar
  instead of the current mess

* Add some ability to create a macro handler
  so that similar code needs to be written only once

  - requires to store code more sensibly before executing any of it


Syscalls
========

* add a way to run external programs ("system")

