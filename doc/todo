.. 
    Copyright © 2007-2008, Matthias Urlichs <matthias@urlichs.de>
    .
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    .
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License (included; see the file LICENSE)
    for more details.

====
TODO
====

So many ideas, so little time …


Code
====

* more documentation (docstring and comments) are always helpful …

* convert some heavy users of (single) Deferreds to @inlineCallbacks

* Improve monitor and ‘delta’ handling

  - high / low limits should apply to the delta

  - introduce proportional change limits etc.

* Improve wind vane handling: Add a short-term moving average which
  collects the last N values; switch to that when it and the normal one
  differ by >7 or so

* implement a PID controller

* Implement a PWM modulator
  - both fixed-total and fixed-min/max-pulse modes please

* implement a multi-step controller (i.e. simple switch thresholds)


FS20
====

* Handle repeaters.

* Implement a FHZ1000/FHZ1300 interface.

* Ignore repeated commands.

* Add send options (how often to repeat immediately / after a delay)

* Handle heating control.

  - interface with the controller

  - control the radiators

* Handle weather devices and similar sensors.

* Audio: Implement an option to control loop speed

* Audio: implement native pulseaudio

* Audio: Figure out why portaudio is broken WRT
  - async input
  - ALSA

* Suppport weather sensors, window-open sensors, and similar gadgets.

* Split the audio processors off to their own subpackage.


Implement a web server
======================

* Grab a bunch of variables and feed a template with them

* RSS

* also serve RRD graphs while we're at it


Complex conditions
==================

	test name *a *b:
		true if TEST
		false if TEST
		true

	if test name foo bar:
		trigger baz

No, I don't want any explicit AND or OR clauses.
Simply grab the first test that applies.
Conditionals can of course work here too!

	test name *a *b:
		name dumb one
		if WHATEVER (otherwise the test doesn't apply)
		true if TEST
		false if TEST
		true
	test name *a *b:
		name dumb two
		if not WHATEVER
		return TEST (this is the end result)

Counters on how often a check has matched would be helpful.


Flexible debugging
==================

* Implement a "show on FOO" command that will display all "FOO"
  events to the current output


Help
====

Group all "list" statements so that the global overview shows only one
line.

Improve the help messages.


Dump config
===========

Each module should be able to print some text that will, when read back
in, re-create the system state as accurately as possible.

* order is important: modules, then event handlers, then everything else,
  except that connections are last

  - wait handlers cannot be restored because there's no way to sanely
    jump back into the execution structure

  - need to require that wait handlers get properly restarted by code

* set a mode that will update existing same-name entries, instead of
  having to destructively replace them

* serialization of a command that can be fed to an interpreter

LIRC
====

* Recognize infrared commands (and send them).

  - connect to /dev/lircd, or a remote socket

* generate LIRC commands 

  - this requires that the lircd server connects to *us*.


net
===

* allow more than one connection (incoming)

  - send to all of them


Parser
======

* Write a (yapps2-based) parser with decent grammar
  instead of the current mess

* Add some ability to create a macro handler
  so that similar code needs to be written only once

  - requires to store code more sensibly before executing any of it


Syscalls
========

* add a way to run external programs ("system")

