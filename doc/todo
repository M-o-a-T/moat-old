====
TODO
====

Code
====

* more documentation (docstring and comments) are always helpful â€¦

* convert some heavy users of (single) Deferreds to @inlineCallbacks

Conditional event handlers
==========================

Implement

	on foo:
		if bar

to ignore the handler if the condition does not match at the moment.

Do this by having the bare "if" raise a special exception which is
caught by a wrapper which runs that priority's next matching event
handler.

Complex conditions
==================

	test name *a *b:
		true if TEST
		false if TEST
		true

	if test name foo bar:
		trigger baz

No, I don't want any explicit AND or OR clauses.
Simply grab the first test that applies.
Conditionals can of course work here too!

	test name *a *b:
		name dumb one
		if WHATEVER (otherwise the test doesn't apply)
		true if TEST
		false if TEST
		true
	test name *a *b:
		name dumb two
		if not WHATEVER
		return TEST (this is the end result)

Counters on how often a check has matched would be helpful.

Help
====

Group all "list" statements so that the global overview shows only one
line.

Improve the help messages.

Dump config
===========

Each module should be able to print some text that will, when read back
in, re-create the system state as accurately as possible.

* order is important: modules, then event handlers, then everything else,
  except that connections are last

  - wait handlers cannot be restored because there's no way to sanely
    jump back into the execution structure

  - need to require that wait handlers get properly restarted by code

LIRC
====

* Recognize infrared commands (and send them).

  - connect to /dev/lircd, or a remote socket

* generate LIRC commands 

  - this requires that the lircd server connects to *us*.

net
===

* allow line-oriented external connects

  - limit number per port

Parser
======

* Write a (yapps2-based) parser with decent grammar
  instead of the current mess

* Add some ability to create a macro handler
  so that similar code needs to be written only once

  - requires to store code more sensibly before executing any of it
