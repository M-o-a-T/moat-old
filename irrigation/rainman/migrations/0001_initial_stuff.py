# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-19 10:48
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import rainman.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('var', models.CharField(help_text='Name in MoaT', max_length=200, unique=True)),
                ('comment', models.CharField(blank=True, help_text='Comment', max_length=200)),
                ('location', models.CharField(help_text='How to identify the controller (host name?)', max_length=200)),
                ('max_on', models.IntegerField(default=3, help_text='number of valves that can be on at any one time')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_controller',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_day',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='DayRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('days', models.ManyToManyField(related_name='ranges', to='rainman.Day')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_dayrange',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='DayTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descr', models.CharField(max_length=200)),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='times', to='rainman.Day')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_daytime',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='EnvGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('factor', models.FloatField(default=1.0, help_text='Base Factor')),
                ('rain', models.BooleanField(default=True, help_text="stop when it's raining?")),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_paramgroup',
            },
        ),
        migrations.CreateModel(
            name='EnvItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor', models.FloatField(default=1.0, help_text='Factor to use at this data point')),
                ('temp', models.FloatField(blank=True, help_text='average temperature (°C)', null=True)),
                ('wind', models.FloatField(blank=True, help_text='wind speed (m/s or whatever)', null=True)),
                ('sun', models.FloatField(blank=True, help_text='how much sunshine was there (0-1)', null=True)),
                ('group', models.ForeignKey(db_column='param_group_id', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='rainman.EnvGroup')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_environmenteffect',
            },
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('var', models.CharField(blank=True, help_text='monitor name in MoaT', max_length=200, null=True, unique=True)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('flow', models.FloatField(blank=True, default=10, help_text='liters per second', null=True)),
                ('db_max_flow_wait', models.PositiveIntegerField(db_column='max_flow_wait', default=300, help_text='Max time for flow measurement')),
                ('disabled', models.BooleanField(default=False, help_text="OFF: don't schedule my valves", max_length=1)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_feed',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('adj', models.FloatField(blank=True, help_text='Adjustment for these valves', null=True)),
                ('days', models.ManyToManyField(blank=True, related_name='groups_y', to='rainman.DayRange')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_group',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='GroupAdjust',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(db_index=True)),
                ('factor', models.FloatField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjusters', to='rainman.Group')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_groupadjust',
            },
        ),
        migrations.CreateModel(
            name='GroupOverride',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('allowed', models.BooleanField(default=False)),
                ('start', models.DateTimeField(db_index=True)),
                ('db_duration', models.PositiveIntegerField(db_column='duration')),
                ('on_level', models.FloatField(blank=True, default=None, help_text='Level above(off)/below(on) which to activate this rule (factor of max)', null=True)),
                ('off_level', models.FloatField(blank=True, default=None, help_text='Level above(off)/below(on) which to activate this rule (factor of max)', null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to='rainman.Group')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_groupoverride',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True)),
                ('rain', models.FloatField(default=0, help_text='how much rain was there (mm)')),
                ('feed', models.FloatField(default=0, help_text='how much water was used (measured)')),
                ('temp', models.FloatField(blank=True, help_text='average temperature (°C)', null=True)),
                ('wind', models.FloatField(blank=True, help_text='wind speed (m/s or whatever)', null=True)),
                ('sun', models.FloatField(blank=True, help_text='how much sunshine was there (0-1)', null=True)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_history',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True)),
                ('level', models.FloatField(help_text='then-current water capacity, in mm')),
                ('flow', models.FloatField(default=0, help_text='liters of inflow since the last entry')),
                ('forced', models.BooleanField(default=False, help_text='manually corrected, leave alone when recalculating')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_level',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger', models.CharField(max_length=200)),
                ('timestamp', models.DateTimeField(db_index=True, default=rainman.utils.now)),
                ('text', models.TextField()),
                ('controller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='rainman.Controller')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_log',
            },
        ),
        migrations.CreateModel(
            name='RainMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('weight', models.PositiveSmallIntegerField(default=10, help_text='how important is this value? 0=presence detector')),
                ('var', models.CharField(help_text='monitor name in MoaT', max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_rainmeter',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(db_index=True)),
                ('db_duration', models.PositiveIntegerField(db_column='duration')),
                ('seen', models.BooleanField(default=False, help_text='Sent to the controller?', max_length=1)),
                ('changed', models.BooleanField(default=False, help_text='Updated by the scheduler?', max_length=1)),
                ('forced', models.BooleanField(default=False, help_text='Generated due to a valve force entry?', max_length=1)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_schedule',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('var', models.CharField(blank=True, help_text='name in MoaT', max_length=200, unique=True)),
                ('host', models.CharField(default='localhost', help_text='where to find the MoaT server', max_length=200)),
                ('port', models.PositiveIntegerField(default=50005, help_text='Port for RPC')),
                ('db_rate', models.FloatField(db_column='rate', default=0.00011574074074074075, help_text='how many mm/day evaporate here, on average')),
                ('db_rain_delay', models.PositiveIntegerField(db_column='rain_delay', default=300, help_text="Wait time after the last sensor says 'no more rain'")),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_site',
            },
        ),
        migrations.CreateModel(
            name='SunMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('weight', models.PositiveSmallIntegerField(default=10, help_text='how important is this value? 0=presence detector')),
                ('var', models.CharField(help_text='monitor name in MoaT', max_length=200, unique=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sun_meters', to='rainman.Site')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_sunmeter',
            },
        ),
        migrations.CreateModel(
            name='TempMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('weight', models.PositiveSmallIntegerField(default=10, help_text='how important is this value? 0=presence detector')),
                ('var', models.CharField(help_text='monitor name in MoaT', max_length=200, unique=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_meters', to='rainman.Site')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_tempmeter',
            },
        ),
        migrations.CreateModel(
            name='UserForSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(choices=[(0, 'None'), (1, 'read'), (2, 'change schedule'), (3, 'admin')], default=1, help_text='Access to …')),
                ('sites', models.ManyToManyField(blank=True, help_text='Sites this user may access', related_name='users', to='rainman.Site')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_userforsite',
            },
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(help_text='how to identify the valve on its controller', max_length=200)),
                ('var', models.CharField(help_text='name of this output, in MoaT', max_length=200, unique=True)),
                ('verbose', models.PositiveSmallIntegerField(default=0, help_text='Log lots of changes?')),
                ('flow', models.FloatField(help_text='liter/sec when open')),
                ('area', models.FloatField(help_text='area in m²')),
                ('max_level', models.FloatField(default=10, help_text='stop accumulating dryness')),
                ('start_level', models.FloatField(default=8, help_text='start watering above this level')),
                ('stop_level', models.FloatField(default=3, help_text='stop watering below this level')),
                ('shade', models.FloatField(default=1, help_text='which part of the standard evaporation rate applies here?')),
                ('db_max_run', models.PositiveIntegerField(blank=True, db_column='max_run', help_text='maximum time-on', null=True)),
                ('db_min_delay', models.PositiveIntegerField(blank=True, db_column='min_delay', help_text='minimum time between runs', null=True)),
                ('runoff', models.FloatField(default=1, help_text='how much incoming rain ends up here?')),
                ('time', models.DateTimeField(db_index=True, default=rainman.utils.now, help_text='time when the level was last calculated')),
                ('level', models.FloatField(default=0, help_text='current water capacity, in mm')),
                ('priority', models.BooleanField(default=False, help_text='the last cycle did not finish')),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='valves', to='rainman.Controller')),
                ('envgroup', models.ForeignKey(db_column='param_group_id', on_delete=django.db.models.deletion.CASCADE, related_name='valves', to='rainman.EnvGroup')),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='valves', to='rainman.Feed')),
                ('groups', models.ManyToManyField(db_table='rainman_group_valves', to='rainman.Group')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_valve',
            },
            bases=(models.Model, rainman.utils.RangeMixin),
        ),
        migrations.CreateModel(
            name='ValveOverride',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('running', models.BooleanField(default=False)),
                ('start', models.DateTimeField(db_index=True)),
                ('db_duration', models.PositiveIntegerField(db_column='duration')),
                ('on_level', models.FloatField(blank=True, default=None, help_text='Level above(off)/below(on) which to activate this rule (factor of max)', null=True)),
                ('off_level', models.FloatField(blank=True, default=None, help_text='Level above(off)/below(on) which to activate this rule (factor of max)', null=True)),
                ('valve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to='rainman.Valve')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_valveoverride',
            },
        ),
        migrations.CreateModel(
            name='WindMeter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('weight', models.PositiveSmallIntegerField(default=10, help_text='how important is this value? 0=presence detector')),
                ('var', models.CharField(help_text='monitor name in MoaT', max_length=200, unique=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wind_meters', to='rainman.Site')),
            ],
            options={
                'abstract': False,
                'db_table': 'rainman_windmeter',
            },
        ),
        migrations.AddField(
            model_name='userforsite',
            name='valves',
            field=models.ManyToManyField(blank=True, help_text='Valves this user may access', related_name='users', to='rainman.Valve'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='valve',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='rainman.Valve'),
        ),
        migrations.AddField(
            model_name='rainmeter',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rain_meters', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='log',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='log',
            name='valve',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='rainman.Valve'),
        ),
        migrations.AddField(
            model_name='level',
            name='valve',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='rainman.Valve'),
        ),
        migrations.AddField(
            model_name='history',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='group',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='group',
            name='valves',
            field=models.ManyToManyField(to='rainman.Valve'),
        ),
        migrations.AddField(
            model_name='group',
            name='xdays',
            field=models.ManyToManyField(blank=True, related_name='groups_n', to='rainman.DayRange'),
        ),
        migrations.AddField(
            model_name='feed',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feed_meters', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='envgroup',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='envgroups', to='rainman.Site'),
        ),
        migrations.AddField(
            model_name='controller',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='controllers', to='rainman.Site'),
        ),
        migrations.AlterUniqueTogether(
            name='windmeter',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='valveoverride',
            unique_together=set([('valve', 'start')]),
        ),
        migrations.AlterUniqueTogether(
            name='valve',
            unique_together=set([('controller', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='tempmeter',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='sunmeter',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='schedule',
            unique_together=set([('valve', 'start')]),
        ),
        migrations.AlterUniqueTogether(
            name='rainmeter',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='level',
            unique_together=set([('valve', 'time')]),
        ),
        migrations.AlterUniqueTogether(
            name='history',
            unique_together=set([('site', 'time')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupoverride',
            unique_together=set([('group', 'start')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupadjust',
            unique_together=set([('group', 'start')]),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='envgroup',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='daytime',
            unique_together=set([('day', 'descr')]),
        ),
        migrations.AlterUniqueTogether(
            name='controller',
            unique_together=set([('site', 'name')]),
        ),
    ]
