NEW: <WorkSequence:1 (4)>
   : â”‚  EVENT: startup
   : â””1â•´... done.
1 EVENT: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
1 END: startup
RUN: <WorkSequence:1 (4)> (step 1)
 ev: EVENT: startup
Init ('foo',)(1) from â€¹main_words ('Main',) 4â€º
Input ('foo',)(1): (['foo'],)
Init ('foo',)(2) from â€¹main_words ('Main',) 4â€º
Input ('foo',)(2): (['foo', 'baz'],)
Init ('foo', 'bar')(3) from â€¹main_words ('Main',) 4â€º
Input ('foo', 'bar')(3): (['foo', 'bar'],)
Init ('foo', 'bar')(4) from â€¹main_words ('Main',) 4â€º
Input ('foo', 'bar')(4): (['foo', 'bar', 'baz'],)
Init ('foo', 'bar')(5) from Ctx(Ctx({'out': <__main__.logwrite obj>}),{'words': â€¹main_words ('Main',) 4â€º})
InputComplex ('foo', 'bar')(5): (['foo', 'bar', 'baz', 'quux'],)
Init ('what',)(6) from â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º
Input ('what',)(6): (['what', 'ever'],)
Init ('for',)(7) from Ctx(Ctx(Ctx({'out': <__main__.logwrite obj>}),{'words': â€¹main_words ('Main',) 4â€º}),{'words': â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º})
InputComplex ('for',)(7): (['for', 'ever', 'and', 'ever'],)
Init ('foiled',)(8) from â€¹€¹ForHandler ('for',) 1â€ (7)â€º
Input ('foiled',)(8): (['foiled', 'again'],)
Init ('what',)(9) from â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º
Input ('what',)(9): (['what', 'else'],)
Init ('foo',)(10) from â€¹main_words ('Main',) 4â€º
Input ('foo',)(10): (['foo', 'again'],)
Main : word list:
foo      : We foo around.
foo bar  : Have a bar, man!
help     : show doc texts
shutdown : stops executing the program.
help:
The "help" command shows which words are recognized at each level.
"help foo" also shows the sub-commands, i.e. what would be allowed
in place of the "XXX" in the following statement:

	foo:
		XXX

Statements may be multi-word and follow generic Python syntax.
foo : We foo around.
Not a command: baz
foo : We foo around.
foo bar : Have a bar, man!
Known words:
for  : for you!
what : What is this?
for : for you!
Known words:
foiled : not clingfilm
foiled : not clingfilm
NEW: <WorkSequence:2 (5)>
   : â”‚  EVENT: shutdown
   : â””1â•´... done.
2 EVENT: shutdown
RUN: <WorkSequence:2 (5)>
 ev: EVENT: shutdown
2 END: shutdown
RUN: shutting down
 at: <WorkSequence:2 (5)> (step 1)
 ev: EVENT: shutdown
RUN: <WorkSequence:2 (5)> (step 1)
 ev: EVENT: shutdown
