NEW: <WorkSequence:1 (4)>
   : â”‚  EVENT: startup
   : â””1â•´... done.
1 EVENT: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
1 END: startup
RUN: <WorkSequence:1 (4)> (step 1)
 ev: EVENT: startup
# call FooHandler(main).input("foo")
Init ('foo',)(1) from â€¹main_words ('Main',) 3â€º
Input ('foo',)(1): (['foo'],)
# call FooHandler(main).input("foo","baz")
Init ('foo',)(2) from â€¹main_words ('Main',) 3â€º
Input ('foo',)(2): (['foo', 'baz'],)
# call FooHandler(main).input("foo","baz")
Init ('foo', 'bar')(3) from â€¹main_words ('Main',) 3â€º
Input ('foo', 'bar')(3): (['foo', 'bar'],)
# call BarHandler(main).input("foo","bar","baz")
Init ('foo', 'bar')(4) from â€¹main_words ('Main',) 3â€º
Input ('foo', 'bar')(4): (['foo', 'bar', 'baz'],)
# call BarHandler(main).input_complex("baz","quux")
Init ('foo', 'bar')(5) from Ctx(Ctx({'out': <__main__.logwrite obj>}),{'words': â€¹main_words ('Main',) 3â€º})
InputComplex ('foo', 'bar')(5): (['foo', 'bar', 'baz', 'quux'],)
# call WhatHandler(bar).input("ever")
Init ('what',)(6) from â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º
Input ('what',)(6): (['what', 'ever'],)
# call ForHandler(bar).input_complex("ever","and","ever")
Init ('for',)(7) from Ctx(Ctx(Ctx({'out': <__main__.logwrite obj>}),{'words': â€¹main_words ('Main',) 3â€º}),{'words': â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º})
InputComplex ('for',)(7): (['for', 'ever', 'and', 'ever'],)
# call FoiledHandler(for).input("again")
Init ('foiled',)(8) from â€¹€¹ForHandler ('for',) 1â€ (7)â€º
Input ('foiled',)(8): (['foiled', 'again'],)
# call WhatHandler(bar).input("else")
Exiting
Init ('what',)(9) from â€¹€¹BarHandler ('foo', 'bar') 2â€ (5)â€º
Input ('what',)(9): (['what', 'else'],)
# call FooHandler(main).input("foo","again")
Exiting
Init ('foo',)(10) from â€¹main_words ('Main',) 3â€º
Input ('foo',)(10): (['foo', 'again'],)
# help
Main : word list:
foo     : We foo around.
foo bar : Have a bar, man!
help    : show doc texts
help:
The "help" command shows which words are recognized at each level.
"help foo" also shows the sub-commands, i.e. what would be allowed
in place of the "XXX" â€¦

	foo:
		XXX
# help foo => we foo around
foo : We foo around.
# help foo baz: complains
Not a command: baz
foo : We foo around.
# help foo bar => have a bar
foo bar : Have a bar, man!
Known words:
for  : for you!
what : What is this?
# help bar for => for you
for : for you!
Known words:
foiled : not clingfilm
# help foo bar for foiled => not clingfilm
foiled : not clingfilm
#EOF
Exiting
NEW: <WorkSequence:2 (4)>
   : â”‚  EVENT: shutdown
   : â””1â•´... done.
2 EVENT: shutdown
RUN: <WorkSequence:2 (4)>
 ev: EVENT: shutdown
2 END: shutdown
RUN: <WorkSequence:2 (4)> (step 1)
 ev: EVENT: shutdown
