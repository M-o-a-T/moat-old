NEW: <WorkSequence:1 (4)>
   : ‚îÇ  EVENT: startup
   : ‚îî1‚ï¥... done.
1 EVENT: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
1 END: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
Init ('foo',)(1) from ‚Äπglobal_words ('Global',) 1‚Ä∫
Input ('foo',)(1): ‚åÅ.foo
Init ('foo',)(2) from ‚Äπglobal_words ('Global',) 1‚Ä∫
Input ('foo',)(2): ‚åÅ.foo¬¶baz
Init ('foo', 'bar')(3) from ‚Äπglobal_words ('Global',) 1‚Ä∫
Input ('foo', 'bar')(3): ‚åÅ.foo¬¶bar
Init ('foo', 'bar')(4) from ‚Äπglobal_words ('Global',) 1‚Ä∫
Input ('foo', 'bar')(4): ‚åÅ.foo¬¶bar¬¶baz
Init ('foo', 'bar')(5) from Ctx(Ctx({'out': <test.logwrite obj>}),{'words': ‚Äπglobal_words ('Global',) 1‚Ä∫})
InputComplex ('foo', 'bar')(5): ['foo', 'bar', 'baz', 'quux']
Init ('what',)(6) from ‚ÄπÄπBarHandler ('foo', 'bar') 2‚Ä (5)‚Ä∫
Input ('what',)(6): ‚åÅ.what¬¶ever
Init ('for',)(7) from Ctx(Ctx(Ctx({'out': <test.logwrite obj>}),{'words': ‚Äπglobal_words ('Global',) 1‚Ä∫}),{'words': ‚ÄπÄπBarHandler ('foo', 'bar') 2‚Ä (5)‚Ä∫})
InputComplex ('for',)(7): ['for', 'ever', 'and', 'ever']
Init ('foiled',)(8) from ‚ÄπÄπForHandler ('for',) 1‚Ä (7)‚Ä∫
Input ('foiled',)(8): ‚åÅ.foiled¬¶again
... moving up
Init ('what',)(9) from ‚ÄπÄπBarHandler ('foo', 'bar') 2‚Ä (5)‚Ä∫
Input ('what',)(9): ‚åÅ.what¬¶else
... moving up
Init ('foo',)(10) from ‚Äπglobal_words ('Global',) 1‚Ä∫
Input ('foo',)(10): ‚åÅ.foo¬¶again
Global : word list:
Known words:
foo      : We foo around.
foo bar  : Have a bar, man!
help     : show doc texts
shutdown : stops executing the program.
help:
The "help" command shows which words are recognized at each level.
"help foo" also shows the sub-commands, i.e. what would be allowed
in place of the "XXX" in the following statement:

	foo:
		XXX

Statements may be multi-word and follow generic Python syntax.
foo : We foo around.
Not a command: baz
foo : We foo around.
foo bar : Have a bar, man!
Known words:
for  : for you!
what : What is this?
for : for you!
Known words:
foiled : not clingfilm
foiled : not clingfilm
NEW: <WorkSequence:2 (5)>
   : ‚îÇ  EVENT: shutdown
   : ‚îî1‚ï¥... done.
2 EVENT: shutdown
RUN: <WorkSequence:2 (5)>
 ev: EVENT: shutdown
2 END: shutdown
RUN: shutting down
 at: <WorkSequence:2 (5)>
 ev: EVENT: shutdown
RUN: <WorkSequence:2 (5)>
 ev: EVENT: shutdown
... moving up
