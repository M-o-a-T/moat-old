NEW: ‹ConditionalWorkSequence:7 (4)›
   : │  id: 7
   : │  call count: 0
   : │  EVENT: startup
   : └1╴... done.
EVENT: startup
END: startup
0 +WAIT 1 start job ‹Collected Parser:n1›
0 -WAIT 1 start job ‹Collected Parser:n1›
0 +WAIT 2 start job <homevent.tokize.tokizer obj>
0 -WAIT 2 start job <homevent.tokize.tokizer obj>
NEW: ‹ConditionalWorkSequence:8 (4)›
   : │  id: 8
   : │  call count: 0
   : │  EVENT: module¦load¦bool
   : └1╴... done.
EVENT: module¦load¦bool
END: module¦load¦bool
NEW: ‹ConditionalWorkSequence:9 (4)›
   : │  id: 9
   : │  call count: 0
   : │  EVENT: module¦load¦logging
   : └1╴... done.
EVENT: module¦load¦logging
END: module¦load¦logging
NEW: ‹ConditionalWorkSequence:10 (4)›
   : │  id: 10
   : │  call count: 0
   : │  EVENT: module¦load¦trigger
   : └1╴... done.
EVENT: module¦load¦trigger
END: module¦load¦trigger
NEW: ‹ConditionalWorkSequence:11 (4)›
   : │  id: 11
   : │  call count: 0
   : │  EVENT: module¦load¦wait
   : └1╴... done.
EVENT: module¦load¦wait
END: module¦load¦wait
NEW: ‹ConditionalWorkSequence:12 (4)›
   : │  id: 12
   : │  call count: 0
   : │  EVENT: module¦load¦on_event
   : └1╴... done.
EVENT: module¦load¦on_event
END: module¦load¦on_event
NEW: ‹ConditionalWorkSequence:13 (4)›
   : │  id: 13
   : │  call count: 0
   : │  EVENT: module¦load¦wago
   : └1╴... done.
EVENT: module¦load¦wago
END: module¦load¦wago
0 +WAIT 3 start job ‹Collected OutLogger:OutLogger¦x2›
0 -WAIT 3 start job ‹Collected OutLogger:OutLogger¦x2›
0 +WAIT 4 start job ‹Async async›
0 -WAIT 4 start job ‹Async async›
0 Create OnEvtHandler: foo¦baba
0 NewHandler 14
0 +WAIT 5 start job ‹Waiter _wait¦1 ??›
0 -WAIT 5 start job ‹Waiter _wait¦1 ??›
NEW: ‹ConditionalWorkSequence:15 (4)›
   : │  id: 15
   : │  call count: 0
   : │  EVENT: wait¦start¦0.1¦_wait¦1
   : └1╴... done.
EVENT: wait¦start¦0.1¦_wait¦1
END: wait¦start¦0.1¦_wait¦1
0 +WAIT 6 start job ‹WAGOqueue:test New›
0 -WAIT 6 start job ‹WAGOqueue:test New›
0 +WAIT 7 start job ‹WAGOqueue:test New›
0 -WAIT 7 start job ‹WAGOqueue:test New›
0 conn connecting WAGOqueue test
0 +WAIT 8 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 -WAIT 8 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 conn setting up WAGOqueue test
0 conn connected WAGOqueue test
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:1›
0 msg recv test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:1›
0 !got UP_EVENT test
NEW: ‹ConditionalWorkSequence:16 (4)›
   : │  id: 16
   : │  call count: 0
   : │  EVENT: wago¦connect¦test
   : └1╴... done.
EVENT: wago¦connect¦test
END: wago¦connect¦test
0 msg recv= MINE <WAGOinitMsg obj>
NEW: ‹ConditionalWorkSequence:17 (4)›
   : │  id: 17
   : │  call count: 0
   : │  EVENT: wait¦done¦0.1¦_wait¦1
   : └1╴... done.
EVENT: wait¦done¦0.1¦_wait¦1
END: wait¦done¦0.1¦_wait¦1
NEW: ‹ConditionalWorkSequence:18 (4)›
   : │  id: 18
   : │  call count: 0
   : │  EVENT: output¦set¦ho¦hey¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦ho¦hey¦foo¦baz
END: output¦set¦ho¦hey¦foo¦baz
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Set.' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'Set.' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOoutputRun 2:1 val=True>
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOinputRun 1:1>
1 in_1 whynot
DEBUG> in_1 whynot
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOinputRun 1:1>
1 Yes
DEBUG> Yes
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOrawRun obj>
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOinputRun 1:1>
1 in_2 why
DEBUG> in_2 why
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOinputRun 1:1>
1 Yes
DEBUG> Yes
0 +WAIT 9 start job ‹Async async›
0 -WAIT 9 start job ‹Async async›
0 +WAIT 10 start job ‹Waiter timed¦set¦A ??›
0 -WAIT 10 start job ‹Waiter timed¦set¦A ??›
NEW: ‹ConditionalWorkSequence:19 (4)›
   : │  id: 19
   : │  call count: 0
   : │  EVENT: wait¦start¦1.3¦timed¦set¦A
   : └1╴... done.
EVENT: wait¦start¦1.3¦timed¦set¦A
END: wait¦start¦1.3¦timed¦set¦A
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOrawRun obj>
NEW: ‹ConditionalWorkSequence:20 (4)›
   : │  id: 20
   : │  call count: 0
   : │  EVENT: output¦set¦hey¦ho¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦hey¦ho¦foo¦baz
END: output¦set¦hey¦ho¦foo¦baz
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Cleared, monitor started.' msgid:1 type:MT_IND_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'Cleared, monitor started.' msgid:1 type:MT_IND_ACK prio:1›
0 msg recv= RECV_AGAIN <WAGOtimedOutputRun 2:1 tm=2.0 sec id=1>
NEW: ‹ConditionalWorkSequence:21 (4)›
   : │  id: 21
   : │  call count: 0
   : │  EVENT: wait¦done¦1.3¦timed¦set¦A
   : └1╴... done.
EVENT: wait¦done¦1.3¦timed¦set¦A
END: wait¦done¦1.3¦timed¦set¦A
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv= NOT_MINE <WAGOtimedOutputRun 2:1 tm=1.8 sec id=1>
0 msg recv= MINE <WAGOrawRun obj>
.
0 +WAIT 11 start job ‹Waiter timed¦set¦B ??›
0 -WAIT 11 start job ‹Waiter timed¦set¦B ??›
NEW: ‹ConditionalWorkSequence:22 (4)›
   : │  id: 22
   : │  call count: 0
   : │  EVENT: wait¦start¦2.3¦timed¦set¦B
   : └1╴... done.
EVENT: wait¦start¦2.3¦timed¦set¦B
END: wait¦start¦2.3¦timed¦set¦B
NEW: ‹ConditionalWorkSequence:23 (4)›
   : │  id: 23
   : │  call count: 0
   : │  EVENT: wait¦done¦2.3¦timed¦set¦B
   : └1╴... done.
EVENT: wait¦done¦2.3¦timed¦set¦B
END: wait¦done¦2.3¦timed¦set¦B
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv= NOT_MINE <WAGOtimedOutputRun 2:1 tm=0.8 sec id=1>
0 msg recv= MINE <WAGOoutputInRun 2:1>
1 out_1 ho
DEBUG> out_1 ho
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:1›
0 msg recv= NOT_MINE <WAGOtimedOutputRun 2:1 tm=0.8 sec id=1>
0 msg recv= MINE <WAGOoutputInRun 2:1>
1 Yes
DEBUG> Yes
0 +WAIT 12 start job ‹Waiter timed¦set¦C ??›
0 -WAIT 12 start job ‹Waiter timed¦set¦C ??›
NEW: ‹ConditionalWorkSequence:24 (4)›
   : │  id: 24
   : │  call count: 0
   : │  EVENT: wait¦start¦3.3¦timed¦set¦C
   : └1╴... done.
EVENT: wait¦start¦3.3¦timed¦set¦C
END: wait¦start¦3.3¦timed¦set¦C
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'TRIGGER' msgid:1 type:MT_IND prio:1›
0 msg recv test ‹MsgIncoming: msg:'TRIGGER' msgid:1 type:MT_IND prio:1›
0 msg recv= RECV_AGAIN <WAGOtimedOutputRun 2:1 tm=now id=1>
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:1 type:MT_IND_NAK prio:1›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:1 type:MT_IND_NAK prio:1›
0 msg recv= MINE <WAGOtimedOutputRun 2:1 tm=now id=1>
1 released
DEBUG> released
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOrawRun obj>
NEW: ‹ConditionalWorkSequence:25 (4)›
   : │  id: 25
   : │  call count: 0
   : │  EVENT: wait¦done¦3.3¦timed¦set¦C
   : └1╴... done.
EVENT: wait¦done¦3.3¦timed¦set¦C
END: wait¦done¦3.3¦timed¦set¦C
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOoutputInRun 2:1>
1 out_2 hey
DEBUG> out_2 hey
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOoutputInRun 2:1>
1 Yes
DEBUG> Yes
0 +WAIT 13 start job ‹Waiter _wait¦5 ??›
0 -WAIT 13 start job ‹Waiter _wait¦5 ??›
NEW: ‹ConditionalWorkSequence:26 (4)›
   : │  id: 26
   : │  call count: 0
   : │  EVENT: wait¦start¦3.4¦_wait¦5
   : └1╴... done.
EVENT: wait¦start¦3.4¦_wait¦5
END: wait¦start¦3.4¦_wait¦5
NEW: ‹ConditionalWorkSequence:27 (4)›
   : │  id: 27
   : │  call count: 0
   : │  EVENT: wait¦done¦3.4¦_wait¦5
   : └1╴... done.
EVENT: wait¦done¦3.4¦_wait¦5
END: wait¦done¦3.4¦_wait¦5
NEW: ‹ConditionalWorkSequence:28 (4)›
   : │  id: 28
   : │  call count: 0
   : │  EVENT: output¦set¦hey¦ho¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦hey¦ho¦foo¦baz
END: output¦set¦hey¦ho¦foo¦baz
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Cleared.' type:MT_ACK prio:1›
0 msg recv test ‹MsgIncoming: msg:'Cleared.' type:MT_ACK prio:1›
0 msg recv= MINE <WAGOoutputRun 2:1 val=False>
0 +WAIT 14 start job ‹Waiter _wait¦6 ??›
0 -WAIT 14 start job ‹Waiter _wait¦6 ??›
NEW: ‹ConditionalWorkSequence:29 (4)›
   : │  id: 29
   : │  call count: 0
   : │  EVENT: wait¦start¦3.9¦_wait¦6
   : └1╴... done.
EVENT: wait¦start¦3.9¦_wait¦6
END: wait¦start¦3.9¦_wait¦6
NEW: ‹ConditionalWorkSequence:30 (4)›
   : │  id: 30
   : │  call count: 0
   : │  EVENT: wait¦done¦3.9¦_wait¦6
   : └1╴... done.
EVENT: wait¦done¦3.9¦_wait¦6
END: wait¦done¦3.9¦_wait¦6
event
input
log
module
monitor
on
output
outtimer
parser
wago conn
wago server
wait
worker
.
test :: wago localhost:59069
.
type: wago
host: localhost
port: 59069
.
test :: ‹WAGOqueue:test connected›
.
queue: 0
state: connected
state since: now (2003-04-05 06:07:08.050000)
sent: (0, 15)
received: (0, 18)
processed: (0, 16)
last_sent : <WAGOoutputRun 2:1 val=False>
          priority: 1
          timeout: 2
          result: Cleared.
          card: 2
          port: 1
          value: False
last_sent_at: now (2003-04-05 06:07:08.100000)
conn attempts: 0
conn timer: 3
out_queued: 0
channel type: wago
        host: localhost
        port: 59069
.
1 Yes
0 +WAIT 15 kill job <homevent.tokize.tokizer obj>
DEBUG> Yes
0 -WAIT 15 kill job <homevent.tokize.tokizer obj>
NEW: ‹ConditionalWorkSequence:31 (6)›
   : │  id: 31
   : │  call count: 0
   : │  EVENT: shutdown
   : └1╴... done.
EVENT: shutdown
0 +WAIT 16 kill job ‹WAGOqueue:test connected›
0 !got DOWN_EVENT test
NEW: ‹ConditionalWorkSequence:32 (4)›
   : │  id: 32
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test
   : └1╴... done.
EVENT: wago¦disconnect¦test
END: wago¦disconnect¦test
0 -WAIT 16 kill job ‹WAGOqueue:test connected›
0 conn deleted WAGOqueue test
NEW: ‹ConditionalWorkSequence:33 (4)›
   : │  id: 33
   : │  call count: 0
   : │  EVENT: module¦unload¦file
   : └1╴... done.
EVENT: module¦unload¦file
END: module¦unload¦file
NEW: ‹ConditionalWorkSequence:34 (4)›
   : │  id: 34
   : │  call count: 0
   : │  EVENT: module¦unload¦data
   : └1╴... done.
EVENT: module¦unload¦data
END: module¦unload¦data
NEW: ‹ConditionalWorkSequence:35 (4)›
   : │  id: 35
   : │  call count: 0
   : │  EVENT: module¦unload¦on_event
   : └1╴... done.
EVENT: module¦unload¦on_event
END: module¦unload¦on_event
NEW: ‹ConditionalWorkSequence:36 (4)›
   : │  id: 36
   : │  call count: 0
   : │  EVENT: module¦unload¦block
   : └1╴... done.
EVENT: module¦unload¦block
END: module¦unload¦block
NEW: ‹ConditionalWorkSequence:37 (4)›
   : │  id: 37
   : │  call count: 0
   : │  EVENT: module¦unload¦logging
   : └1╴... done.
EVENT: module¦unload¦logging
END: module¦unload¦logging
NEW: ‹ConditionalWorkSequence:38 (4)›
   : │  id: 38
   : │  call count: 0
   : │  EVENT: module¦unload¦wait
   : └1╴... done.
EVENT: module¦unload¦wait
END: module¦unload¦wait
NEW: ‹ConditionalWorkSequence:39 (4)›
   : │  id: 39
   : │  call count: 0
   : │  EVENT: module¦unload¦wago
   : └1╴... done.
EVENT: module¦unload¦wago
END: module¦unload¦wago
NEW: ‹ConditionalWorkSequence:40 (4)›
   : │  id: 40
   : │  call count: 0
   : │  EVENT: module¦unload¦ifelse
   : └1╴... done.
EVENT: module¦unload¦ifelse
END: module¦unload¦ifelse
NEW: ‹ConditionalWorkSequence:41 (4)›
   : │  id: 41
   : │  call count: 0
   : │  EVENT: module¦unload¦trigger
   : └1╴... done.
EVENT: module¦unload¦trigger
END: module¦unload¦trigger
NEW: ‹ConditionalWorkSequence:42 (4)›
   : │  id: 42
   : │  call count: 0
   : │  EVENT: module¦unload¦path
   : └1╴... done.
EVENT: module¦unload¦path
END: module¦unload¦path
NEW: ‹ConditionalWorkSequence:43 (4)›
   : │  id: 43
   : │  call count: 0
   : │  EVENT: module¦unload¦bool
   : └1╴... done.
EVENT: module¦unload¦bool
END: module¦unload¦bool
END: shutdown
