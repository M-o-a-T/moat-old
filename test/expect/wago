NEW: ‹ConditionalWorkSequence:7 (4)›
   : │  id: 7
   : │  call count: 0
   : │  EVENT: startup
   : └1╴... done.
EVENT: startup
END: startup
0 +WAIT 1 start job ‹Collected Parser:n1›
0 -WAIT 1 start job ‹Collected Parser:n1›
0 +WAIT 2 start job <homevent.tokize.tokizer obj>
0 -WAIT 2 start job <homevent.tokize.tokizer obj>
NEW: ‹ConditionalWorkSequence:8 (4)›
   : │  id: 8
   : │  call count: 0
   : │  EVENT: module¦load¦bool
   : └1╴... done.
EVENT: module¦load¦bool
END: module¦load¦bool
NEW: ‹ConditionalWorkSequence:9 (4)›
   : │  id: 9
   : │  call count: 0
   : │  EVENT: module¦load¦logging
   : └1╴... done.
EVENT: module¦load¦logging
END: module¦load¦logging
NEW: ‹ConditionalWorkSequence:10 (4)›
   : │  id: 10
   : │  call count: 0
   : │  EVENT: module¦load¦trigger
   : └1╴... done.
EVENT: module¦load¦trigger
END: module¦load¦trigger
NEW: ‹ConditionalWorkSequence:11 (4)›
   : │  id: 11
   : │  call count: 0
   : │  EVENT: module¦load¦wait
   : └1╴... done.
EVENT: module¦load¦wait
END: module¦load¦wait
NEW: ‹ConditionalWorkSequence:12 (4)›
   : │  id: 12
   : │  call count: 0
   : │  EVENT: module¦load¦on_event
   : └1╴... done.
EVENT: module¦load¦on_event
END: module¦load¦on_event
NEW: ‹ConditionalWorkSequence:13 (4)›
   : │  id: 13
   : │  call count: 0
   : │  EVENT: module¦load¦wago
   : └1╴... done.
EVENT: module¦load¦wago
END: module¦load¦wago
NEW: ‹ConditionalWorkSequence:14 (4)›
   : │  id: 14
   : │  call count: 0
   : │  EVENT: module¦load¦monitor
   : └1╴... done.
EVENT: module¦load¦monitor
END: module¦load¦monitor
0 +WAIT 3 start job ‹Collected OutLogger:OutLogger¦x2›
0 -WAIT 3 start job ‹Collected OutLogger:OutLogger¦x2›
0 +WAIT 4 start job ‹Async async›
0 -WAIT 4 start job ‹Async async›
0 Create OnEvtHandler: wago¦connect¦test
0 NewHandler 15
0 +WAIT 5 start job ‹Waiter _wait¦1 ??›
0 -WAIT 5 start job ‹Waiter _wait¦1 ??›
NEW: ‹ConditionalWorkSequence:16 (4)›
   : │  id: 16
   : │  call count: 0
   : │  EVENT: wait¦start¦0.2¦_wait¦1
   : └1╴... done.
EVENT: wait¦start¦0.2¦_wait¦1
END: wait¦start¦0.2¦_wait¦1
0 +WAIT 6 start job ‹WAGOqueue:test New›
0 -WAIT 6 start job ‹WAGOqueue:test New›
0 +WAIT 7 start job ‹WAGOqueue:test New›
0 -WAIT 7 start job ‹WAGOqueue:test New›
0 msg setstate init closed
0 msg setstate closed want
0 msg setstate want connecting
0 conn connecting WAGOqueue test
0 +WAIT 8 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 -WAIT 8 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 conn setting up WAGOqueue test
0 conn connected WAGOqueue test
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 1›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 2›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 3›
0 wago recv '* WAGO ready.'
0 msg recv msg ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 msg recv test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 !got UP_EVENT test
NEW: ‹ConditionalWorkSequence:17 (5)›
   : │  id: 17
   : │  call count: 0
   : │  EVENT: wago¦connect¦test
   : ├1╴on wago connect test ‹OnEventHandler›
   : │  prio: 51
   : │  step: async ‹Async›
   : │      : step: send wago test Dc ‹WAGOraw›
   : │      : step: send wago test DI ‹WAGOraw›
   : │      : step: send wago test Dr ‹WAGOraw›
   : └2╴... done.
EVENT: wago¦connect¦test
RUN: on wago connect test ‹OnEventHandler›
   : prio: 51
   : step: async ‹Async›
   :     : step: send wago test Dc ‹WAGOraw›
   :     : step: send wago test DI ‹WAGOraw›
   :     : step: send wago test Dr ‹WAGOraw›
 at: ‹ConditionalWorkSequence:17 (5)› (step 1)
 ev: EVENT: wago¦connect¦test
0 +WAIT 9 start job ‹Async async›
0 -WAIT 9 start job ‹Async async›
END: wago¦connect¦test
0 msg recv= MINE ‹WAGOinitMsg 4›
0 msg states at run connected connecting
0 NotConn [[], [‹WAGOmonitorsMsg 5›], [‹WAGOkeepaliveMsg 6›], []]
0 msg setstate connecting connected
0 msg states at run connected connected
0 msg send ‹WAGOmonitorsMsg 7›
0 wago send 'm'
0 msg send result RECV_AGAIN
0 msg states at run connected connected
0 msg blocked by ‹WAGOmonitorsMsg 8›
0 wago recv '=Monitors:'
0 wago recv '.'
0 msg recv msg ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 msg recv test ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 msg recv= MINE ‹WAGOmonitorsMsg 9›
0 msg states at run connected connected
0 msg send ‹WAGOkeepaliveMsg a›
0 wago send 'Da0.5'
0 msg send result RECV_AGAIN
0 msg send ‹WAGOrawRun b›
0 wago send u'Dc'
0 msg send result RECV_AGAIN
0 wago recv '!+1 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:1 type:MT_IND_ACK prio:2›
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:1 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:1 type:MT_IND_ACK prio:2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg c›
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg d›
0 msg recv= MINE ‹WAGOrawRun e›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOrawRun f›
0 wago send u'DI'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 10›
0 msg recv= MINE ‹WAGOrawRun 11›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 12›
0 wago send u'Dr'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 13›
0 msg recv= MINE ‹WAGOrawRun 14›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:18 (4)›
   : │  id: 18
   : │  call count: 0
   : │  EVENT: wait¦done¦0.2¦_wait¦1
   : └1╴... done.
EVENT: wait¦done¦0.2¦_wait¦1
END: wait¦done¦0.2¦_wait¦1
NEW: ‹ConditionalWorkSequence:19 (4)›
   : │  id: 19
   : │  call count: 0
   : │  EVENT: output¦set¦ho¦hey¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦ho¦hey¦foo¦baz
END: output¦set¦ho¦hey¦foo¦baz
0 msg states at run connected connected
0 msg send ‹WAGOoutputRun 2:1 val=True›
0 wago send 's 2 1'
0 msg send result RECV_AGAIN
0 wago recv '+Set.'
0 msg recv msg ‹MsgIncoming: msg:'Set.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Set.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Set.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 15›
0 msg recv= MINE ‹WAGOoutputRun 2:1 val=True›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOinputRun 1:1›
0 wago send 'i 1 1'
0 msg send result RECV_AGAIN
0 wago recv '+0'
0 msg recv msg ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 16›
0 msg recv= MINE ‹WAGOinputRun 1:1›
0 msg states at run connected connected
1 in_1 whynot
DEBUG> in_1 whynot
0 msg states at run connected connected
0 msg send ‹WAGOinputRun 1:1›
0 wago send 'i 1 1'
0 msg send result RECV_AGAIN
0 wago recv '+0'
0 msg recv msg ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 17›
0 msg recv= MINE ‹WAGOinputRun 1:1›
0 msg states at run connected connected
1 Yes
DEBUG> Yes
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 18›
0 wago send u'Ds'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 19›
0 msg recv= MINE ‹WAGOrawRun 1a›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOinputRun 1:1›
0 wago send 'i 1 1'
0 msg send result RECV_AGAIN
0 wago recv '+1'
0 msg recv msg ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 1b›
0 msg recv= MINE ‹WAGOinputRun 1:1›
0 msg states at run connected connected
1 in_2 why
DEBUG> in_2 why
0 msg states at run connected connected
0 msg send ‹WAGOinputRun 1:1›
0 wago send 'i 1 1'
0 msg send result RECV_AGAIN
0 wago recv '+1'
0 msg recv msg ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 1c›
0 msg recv= MINE ‹WAGOinputRun 1:1›
0 msg states at run connected connected
1 Yes
DEBUG> Yes
0 +WAIT 10 start job ‹Async async›
0 -WAIT 10 start job ‹Async async›
0 +WAIT 11 start job ‹Waiter timed¦set¦A ??›
0 -WAIT 11 start job ‹Waiter timed¦set¦A ??›
NEW: ‹ConditionalWorkSequence:20 (4)›
   : │  id: 20
   : │  call count: 0
   : │  EVENT: wait¦start¦0.4¦timed¦set¦A
   : └1╴... done.
EVENT: wait¦start¦0.4¦timed¦set¦A
END: wait¦start¦0.4¦timed¦set¦A
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 1d›
0 wago send u'DS'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 1e›
0 msg recv= MINE ‹WAGOrawRun 1f›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:21 (4)›
   : │  id: 21
   : │  call count: 0
   : │  EVENT: output¦set¦hey¦ho¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦hey¦ho¦foo¦baz
END: output¦set¦hey¦ho¦foo¦baz
0 msg states at run connected connected
0 msg send ‹WAGOtimedOutputRun 2:1 val=False tm=2.0 sec id=None›
0 wago send 'c 2 1 1.999407'
0 msg send result RECV_AGAIN
0 wago recv '!+2 Cleared, monitor started.'
0 msg recv msg ‹MsgIncoming: msg:'Cleared, monitor started.' msgid:2 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Cleared, monitor started.' msgid:2 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Cleared, monitor started.' msgid:2 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 20›
0 msg recv= RECV_AGAIN ‹WAGOtimedOutputRun 2:1 val=False tm=2.0 sec id=2›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:22 (4)›
   : │  id: 22
   : │  call count: 0
   : │  EVENT: wait¦done¦0.4¦timed¦set¦A
   : └1╴... done.
EVENT: wait¦done¦0.4¦timed¦set¦A
END: wait¦done¦0.4¦timed¦set¦A
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 21›
0 wago send u'DC'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 22›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=1.8 sec id=2›
0 msg recv= MINE ‹WAGOrawRun 23›
0 msg states at run connected connected
.
0 +WAIT 12 start job ‹Waiter timed¦set¦B ??›
0 -WAIT 12 start job ‹Waiter timed¦set¦B ??›
NEW: ‹ConditionalWorkSequence:23 (4)›
   : │  id: 23
   : │  call count: 0
   : │  EVENT: wait¦start¦1.4¦timed¦set¦B
   : └1╴... done.
EVENT: wait¦start¦1.4¦timed¦set¦B
END: wait¦start¦1.4¦timed¦set¦B
0 wago recv '!1 PING 1'
0 msg recv msg ‹MsgIncoming: msg:'PING 1' msgid:1 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 1' msgid:1 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 1' msgid:1 type:MT_IND prio:2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 24›
0 msg states at run connected connected
0 wago recv '!1 PING 2'
0 msg recv msg ‹MsgIncoming: msg:'PING 2' msgid:1 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 2' msgid:1 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 2' msgid:1 type:MT_IND prio:2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 25›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:24 (4)›
   : │  id: 24
   : │  call count: 0
   : │  EVENT: wait¦done¦1.4¦timed¦set¦B
   : └1╴... done.
EVENT: wait¦done¦1.4¦timed¦set¦B
END: wait¦done¦1.4¦timed¦set¦B
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 26›
0 wago send u'D-'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 27›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=0.8 sec id=2›
0 msg recv= MINE ‹WAGOrawRun 28›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOoutputInRun 2:1›
0 wago send 'I 2 1'
0 msg send result RECV_AGAIN
0 wago recv '+0'
0 msg recv msg ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 29›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=0.8 sec id=2›
0 msg recv= MINE ‹WAGOoutputInRun 2:1›
0 msg states at run connected connected
1 out_1 ho
DEBUG> out_1 ho
0 msg states at run connected connected
0 msg send ‹WAGOoutputInRun 2:1›
0 wago send 'I 2 1'
0 msg send result RECV_AGAIN
0 wago recv '+0'
0 msg recv msg ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'0' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 2a›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=0.8 sec id=2›
0 msg recv= MINE ‹WAGOoutputInRun 2:1›
0 msg states at run connected connected
1 Yes
DEBUG> Yes
0 +WAIT 13 start job ‹Waiter timed¦set¦C ??›
0 -WAIT 13 start job ‹Waiter timed¦set¦C ??›
NEW: ‹ConditionalWorkSequence:25 (4)›
   : │  id: 25
   : │  call count: 0
   : │  EVENT: wait¦start¦2.4¦timed¦set¦C
   : └1╴... done.
EVENT: wait¦start¦2.4¦timed¦set¦C
END: wait¦start¦2.4¦timed¦set¦C
0 !got DOWN_EVENT test
NEW: ‹ConditionalWorkSequence:26 (4)›
   : │  id: 26
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test
   : └1╴... done.
EVENT: wago¦disconnect¦test
END: wago¦disconnect¦test
0 msg setstate2 connected closed
0 conn ReOpen WAGOqueue test
0 msg setstate closed waiting: wait 3.000000
NEW: ‹ConditionalWorkSequence:27 (4)›
   : │  id: 27
   : │  call count: 0
   : │  EVENT: wait¦done¦2.4¦timed¦set¦C
   : └1╴... done.
EVENT: wait¦done¦2.4¦timed¦set¦C
END: wait¦done¦2.4¦timed¦set¦C
0 msg setstate waiting want
0 msg setstate want connecting
0 conn connecting WAGOqueue test
0 +WAIT 14 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 -WAIT 14 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 conn setting up WAGOqueue test
0 conn connected WAGOqueue test
0 msg states at run connected connecting
0 NotConn [[], [], [‹WAGOoutputInRun 2:1›, ‹WAGOkeepaliveMsg 2b›], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 2c›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 2d›
0 wago recv '* WAGO ready.'
0 msg recv msg ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 msg recv test ‹MsgIncoming: msg:'WAGO ready.' type:MT_INFO prio:2›
0 !got UP_EVENT test
NEW: ‹ConditionalWorkSequence:28 (5)›
   : │  id: 28
   : │  call count: 0
   : │  EVENT: wago¦connect¦test
   : ├1╴on wago connect test ‹OnEventHandler›
   : │  prio: 51
   : │  step: async ‹Async›
   : │      : step: send wago test Dc ‹WAGOraw›
   : │      : step: send wago test DI ‹WAGOraw›
   : │      : step: send wago test Dr ‹WAGOraw›
   : └2╴... done.
EVENT: wago¦connect¦test
RUN: on wago connect test ‹OnEventHandler›
   : prio: 51
   : step: async ‹Async›
   :     : step: send wago test Dc ‹WAGOraw›
   :     : step: send wago test DI ‹WAGOraw›
   :     : step: send wago test Dr ‹WAGOraw›
 at: ‹ConditionalWorkSequence:28 (5)› (step 1)
 ev: EVENT: wago¦connect¦test
0 +WAIT 15 start job ‹Async async›
0 -WAIT 15 start job ‹Async async›
END: wago¦connect¦test
0 msg recv= MINE ‹WAGOinitMsg 2e›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg states at run connected connecting
0 NotConn [[], [‹WAGOmonitorsMsg 2f›], [‹WAGOoutputInRun 2:1›, ‹WAGOkeepaliveMsg 30›], []]
0 msg setstate connecting connected
0 msg states at run connected connected
0 msg send ‹WAGOmonitorsMsg 31›
0 wago send 'm'
0 msg send result RECV_AGAIN
0 msg states at run connected connected
0 msg blocked by ‹WAGOmonitorsMsg 32›
0 wago recv '=Monitors:'
0 wago recv '.'
0 msg recv msg ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 msg recv test ‹MsgIncoming: msg:['Monitors:'] type:MT_MULTILINE prio:2›
0 msg recv= MINE ‹WAGOmonitorsMsg 33›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg states at run connected connected
0 msg send ‹WAGOoutputInRun 2:1›
0 wago send 'I 2 1'
0 msg send result RECV_AGAIN
0 msg send ‹WAGOkeepaliveMsg 34›
0 wago send 'Da0.5'
0 msg send result RECV_AGAIN
0 msg send ‹WAGOrawRun 35›
0 wago send u'Dc'
0 msg send result RECV_AGAIN
0 wago recv '+1'
0 msg recv msg ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 wago recv '!+3 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:3 type:MT_IND_ACK prio:2›
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= MINE ‹WAGOoutputInRun 2:1›
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:3 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:3 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 36›
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 37›
0 msg recv= MINE ‹WAGOrawRun 38›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 39›
0 wago send u'DI'
0 msg send result RECV_AGAIN
1 out_2 hey
DEBUG> out_2 hey
0 msg states at run connected connected
0 msg send ‹WAGOoutputInRun 2:1›
0 wago send 'I 2 1'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 wago recv '+1'
0 msg recv msg ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 3a›
0 msg recv= MINE ‹WAGOrawRun 3b›
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'1' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 3c›
0 msg recv= MINE ‹WAGOoutputInRun 2:1›
0 msg states at run connected connected
1 Yes
DEBUG> Yes
0 +WAIT 16 start job ‹Waiter _wait¦5 ??›
0 -WAIT 16 start job ‹Waiter _wait¦5 ??›
NEW: ‹ConditionalWorkSequence:29 (4)›
   : │  id: 29
   : │  call count: 0
   : │  EVENT: wait¦start¦4.6¦_wait¦5
   : └1╴... done.
EVENT: wait¦start¦4.6¦_wait¦5
END: wait¦start¦4.6¦_wait¦5
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 3d›
0 wago send u'Dr'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 3e›
0 msg recv= MINE ‹WAGOrawRun 3f›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:30 (4)›
   : │  id: 30
   : │  call count: 0
   : │  EVENT: wait¦done¦4.6¦_wait¦5
   : └1╴... done.
EVENT: wait¦done¦4.6¦_wait¦5
END: wait¦done¦4.6¦_wait¦5
NEW: ‹ConditionalWorkSequence:31 (4)›
   : │  id: 31
   : │  call count: 0
   : │  EVENT: output¦set¦hey¦ho¦foo¦baz
   : └1╴... done.
EVENT: output¦set¦hey¦ho¦foo¦baz
END: output¦set¦hey¦ho¦foo¦baz
0 msg states at run connected connected
0 msg send ‹WAGOoutputRun 2:1 val=False›
0 wago send 'c 2 1'
0 msg send result RECV_AGAIN
0 wago recv '+Cleared.'
0 msg recv msg ‹MsgIncoming: msg:'Cleared.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Cleared.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Cleared.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.4 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 40›
0 msg recv= MINE ‹WAGOoutputRun 2:1 val=False›
0 msg states at run connected connected
0 +WAIT 17 start job ‹Waiter _wait¦6 ??›
0 -WAIT 17 start job ‹Waiter _wait¦6 ??›
NEW: ‹ConditionalWorkSequence:32 (4)›
   : │  id: 32
   : │  call count: 0
   : │  EVENT: wait¦start¦5.1¦_wait¦6
   : └1╴... done.
EVENT: wait¦start¦5.1¦_wait¦6
END: wait¦start¦5.1¦_wait¦6
0 wago recv '!3 PING 1'
0 msg recv msg ‹MsgIncoming: msg:'PING 1' msgid:3 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 1' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 1' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.8 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 41›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:33 (4)›
   : │  id: 33
   : │  call count: 0
   : │  EVENT: wait¦done¦5.1¦_wait¦6
   : └1╴... done.
EVENT: wait¦done¦5.1¦_wait¦6
END: wait¦done¦5.1¦_wait¦6
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 42›
0 wago send u'Dc'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 43›
0 msg recv= MINE ‹WAGOrawRun 44›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 45›
0 wago send u'd 0.01'
0 msg send result RECV_AGAIN
0 wago recv '+Loop timer changed.'
0 msg recv msg ‹MsgIncoming: msg:'Loop timer changed.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Loop timer changed.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Loop timer changed.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 46›
0 msg recv= MINE ‹WAGOrawRun 47›
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦count¦up off››
0 wago send 'm# 1 1 + 1.000000'
0 msg send result RECV_AGAIN
0 wago recv '!+4 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:4 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:4 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:4 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 48›
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦up off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:34 (4)›
   : │  id: 34
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦count¦up
   : └1╴... done.
EVENT: monitor¦start¦test¦count¦up
END: monitor¦start¦test¦count¦up
0 +WAIT 18 start job ‹WAGOmon test¦count¦up off›
0 -WAIT 18 start job ‹WAGOmon test¦count¦up off›
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦count¦down off››
0 wago send 'm# 1 1 - 1.000000'
0 msg send result RECV_AGAIN
0 monitor Start run test¦count¦up
0 +WAIT 19 monitor one_value test count up
0 wago recv '!+5 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:5 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:5 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:5 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 49›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦down off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:35 (4)›
   : │  id: 35
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦count¦down
   : └1╴... done.
EVENT: monitor¦start¦test¦count¦down
END: monitor¦start¦test¦count¦down
0 +WAIT 20 start job ‹WAGOmon test¦count¦down off›
0 -WAIT 20 start job ‹WAGOmon test¦count¦down off›
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦count¦both off››
0 wago send 'm# 1 1 * 1.000000'
0 msg send result RECV_AGAIN
0 monitor Start run test¦count¦down
0 +WAIT 21 monitor one_value test count down
0 wago recv '!+6 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:6 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:6 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:6 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 4a›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦both off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:36 (4)›
   : │  id: 36
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦count¦both
   : └1╴... done.
EVENT: monitor¦start¦test¦count¦both
END: monitor¦start¦test¦count¦both
0 +WAIT 22 start job ‹WAGOmon test¦count¦both off›
0 -WAIT 22 start job ‹WAGOmon test¦count¦both off›
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦report¦up off››
0 wago send 'm+ 1 1 +'
0 msg send result RECV_AGAIN
0 monitor Start run test¦count¦both
0 +WAIT 23 monitor one_value test count both
0 wago recv '!+7 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:7 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:7 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:7 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 4b›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦up off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:37 (4)›
   : │  id: 37
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦report¦up
   : └1╴... done.
EVENT: monitor¦start¦test¦report¦up
END: monitor¦start¦test¦report¦up
0 +WAIT 24 start job ‹WAGOmon test¦report¦up off›
0 -WAIT 24 start job ‹WAGOmon test¦report¦up off›
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦report¦down off››
0 wago send 'm+ 1 1 -'
0 msg send result RECV_AGAIN
0 monitor Start run test¦report¦up
0 +WAIT 25 monitor one_value test report up
0 wago recv '!+8 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:8 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:8 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:8 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 4c›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦down off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:38 (4)›
   : │  id: 38
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦report¦down
   : └1╴... done.
EVENT: monitor¦start¦test¦report¦down
END: monitor¦start¦test¦report¦down
0 +WAIT 26 start job ‹WAGOmon test¦report¦down off›
0 -WAIT 26 start job ‹WAGOmon test¦report¦down off›
0 msg states at run connected connected
0 msg send ‹WAGOmonRun ‹WAGOmon test¦report¦both off››
0 wago send 'm+ 1 1 *'
0 msg send result RECV_AGAIN
0 monitor Start run test¦report¦down
0 +WAIT 27 monitor one_value test report down
0 wago recv '!+9 monitor created'
0 msg recv msg ‹MsgIncoming: msg:'monitor created' msgid:9 type:MT_IND_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'monitor created' msgid:9 type:MT_IND_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'monitor created' msgid:9 type:MT_IND_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-2.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 4d›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦both off››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:39 (4)›
   : │  id: 39
   : │  call count: 0
   : │  EVENT: monitor¦start¦test¦report¦both
   : └1╴... done.
EVENT: monitor¦start¦test¦report¦both
END: monitor¦start¦test¦report¦both
0 +WAIT 28 start job ‹WAGOmon test¦report¦both off›
0 -WAIT 28 start job ‹WAGOmon test¦report¦both off›
0 +WAIT 29 start job ‹Waiter _wait¦7 ??›
0 -WAIT 29 start job ‹Waiter _wait¦7 ??›
NEW: ‹ConditionalWorkSequence:40 (4)›
   : │  id: 40
   : │  call count: 0
   : │  EVENT: wait¦start¦5.2¦_wait¦7
   : └1╴... done.
EVENT: wait¦start¦5.2¦_wait¦7
END: wait¦start¦5.2¦_wait¦7
0 monitor Start run test¦report¦both
0 +WAIT 30 monitor one_value test report both
NEW: ‹ConditionalWorkSequence:41 (4)›
   : │  id: 41
   : │  call count: 0
   : │  EVENT: wait¦done¦5.2¦_wait¦7
   : └1╴... done.
EVENT: wait¦done¦5.2¦_wait¦7
END: wait¦done¦5.2¦_wait¦7
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 4e›
0 wago send u'Ds'
0 msg send result RECV_AGAIN
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.0 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 4f›
0 msg recv= MINE ‹WAGOrawRun 50›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 +WAIT 31 start job ‹Waiter _wait¦8 ??›
0 -WAIT 31 start job ‹Waiter _wait¦8 ??›
NEW: ‹ConditionalWorkSequence:42 (4)›
   : │  id: 42
   : │  call count: 0
   : │  EVENT: wait¦start¦5.3¦_wait¦8
   : └1╴... done.
EVENT: wait¦start¦5.3¦_wait¦8
END: wait¦start¦5.3¦_wait¦8
0 wago recv '!9 H'
0 msg recv msg ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 wago recv '!7 H'
0 msg recv msg ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.0 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 51›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 -WAIT 30 monitor one_value test report both
0 monitor raw 1 test report both
0 monitor filter [1] on test¦report¦both
0 monitor End run test¦report¦both
NEW: ‹ConditionalWorkSequence:43 (4)›
   : │  id: 43
   : │  call count: 0
   : │  EVENT: monitor¦value¦1.0¦test¦report¦both
   : └1╴... done.
EVENT: monitor¦value¦1.0¦test¦report¦both
END: monitor¦value¦1.0¦test¦report¦both
0 monitor Stop run test¦report¦both
0 +WAIT 32 monitor sleep test report both
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦both on 1.0››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.0 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 52›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 -WAIT 25 monitor one_value test report up
0 monitor raw 1 test report up
0 monitor filter [1] on test¦report¦up
0 monitor End run test¦report¦up
NEW: ‹ConditionalWorkSequence:44 (4)›
   : │  id: 44
   : │  call count: 0
   : │  EVENT: monitor¦value¦1.0¦test¦report¦up
   : └1╴... done.
EVENT: monitor¦value¦1.0¦test¦report¦up
END: monitor¦value¦1.0¦test¦report¦up
0 monitor Stop run test¦report¦up
0 +WAIT 33 monitor sleep test report up
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦up on 1.0››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:45 (4)›
   : │  id: 45
   : │  call count: 0
   : │  EVENT: wait¦done¦5.4¦_wait¦8
   : └1╴... done.
EVENT: wait¦done¦5.4¦_wait¦8
END: wait¦done¦5.4¦_wait¦8
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 53›
0 wago send u'Dc'
0 msg send result RECV_AGAIN
0 -WAIT 33 monitor sleep test report up
0 +WAIT 34 monitor sleep test report up
0 -WAIT 32 monitor sleep test report both
0 +WAIT 35 monitor sleep test report both
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.2 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 54›
0 msg recv= MINE ‹WAGOrawRun 55›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up on 1.0››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both on 1.0››
0 msg states at run connected connected
0 +WAIT 36 start job ‹Waiter _wait¦9 ??›
0 -WAIT 36 start job ‹Waiter _wait¦9 ??›
NEW: ‹ConditionalWorkSequence:46 (4)›
   : │  id: 46
   : │  call count: 0
   : │  EVENT: wait¦start¦5.5¦_wait¦9
   : └1╴... done.
EVENT: wait¦start¦5.5¦_wait¦9
END: wait¦start¦5.5¦_wait¦9
0 wago recv '!9 L'
0 msg recv msg ‹MsgIncoming: msg:'L' msgid:9 type:MT_IND prio:2›
0 wago recv '!8 L'
0 msg recv msg ‹MsgIncoming: msg:'L' msgid:8 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'L' msgid:9 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'L' msgid:9 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.2 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 56›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up on 1.0››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
NEW: ‹ConditionalWorkSequence:47 (4)›
   : │  id: 47
   : │  call count: 0
   : │  EVENT: monitor¦error¦overrun¦test¦report¦both
   : └1╴... done.
EVENT: monitor¦error¦overrun¦test¦report¦both
END: monitor¦error¦overrun¦test¦report¦both
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦both on 1.0››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'L' msgid:8 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'L' msgid:8 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.2 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 57›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up on 1.0››
0 -WAIT 27 monitor one_value test report down
0 monitor raw 1 test report down
0 monitor filter [1] on test¦report¦down
0 monitor End run test¦report¦down
NEW: ‹ConditionalWorkSequence:48 (4)›
   : │  id: 48
   : │  call count: 0
   : │  EVENT: monitor¦value¦1.0¦test¦report¦down
   : └1╴... done.
EVENT: monitor¦value¦1.0¦test¦report¦down
END: monitor¦value¦1.0¦test¦report¦down
0 monitor Stop run test¦report¦down
0 +WAIT 37 monitor sleep test report down
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦down on 1.0››
0 msg states at run connected connected
0 -WAIT 35 monitor sleep test report both
0 monitor Start run test¦report¦both
0 +WAIT 38 monitor one_value test report both
0 -WAIT 34 monitor sleep test report up
0 monitor Start run test¦report¦up
0 +WAIT 39 monitor one_value test report up
0 wago recv '!3 PING 2'
0 msg recv msg ‹MsgIncoming: msg:'PING 2' msgid:3 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 2' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 2' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.3 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 58›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down on 1.0››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:49 (4)›
   : │  id: 49
   : │  call count: 0
   : │  EVENT: wait¦done¦5.6¦_wait¦9
   : └1╴... done.
EVENT: wait¦done¦5.6¦_wait¦9
END: wait¦done¦5.6¦_wait¦9
0 msg states at run connected connected
0 msg send ‹WAGOrawRun 59›
0 wago send u'Ds'
0 msg send result RECV_AGAIN
0 -WAIT 37 monitor sleep test report down
0 +WAIT 40 monitor sleep test report down
0 wago recv '+OK'
0 msg recv msg ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'OK' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.4 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 5a›
0 msg recv= MINE ‹WAGOrawRun 5b›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down on 1.0››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 +WAIT 41 start job ‹Waiter _wait¦10 ??›
0 -WAIT 41 start job ‹Waiter _wait¦10 ??›
NEW: ‹ConditionalWorkSequence:50 (4)›
   : │  id: 50
   : │  call count: 0
   : │  EVENT: wait¦start¦6.6¦_wait¦10
   : └1╴... done.
EVENT: wait¦start¦6.6¦_wait¦10
END: wait¦start¦6.6¦_wait¦10
0 wago recv '!9 H'
0 msg recv msg ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 wago recv '!7 H'
0 msg recv msg ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'H' msgid:9 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.4 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 5c›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down on 1.0››
0 -WAIT 38 monitor one_value test report both
0 monitor raw 3 test report both
0 monitor filter [3] on test¦report¦both
0 monitor End run test¦report¦both
NEW: ‹ConditionalWorkSequence:51 (4)›
   : │  id: 51
   : │  call count: 0
   : │  EVENT: monitor¦value¦3.0¦test¦report¦both
   : └1╴... done.
EVENT: monitor¦value¦3.0¦test¦report¦both
END: monitor¦value¦3.0¦test¦report¦both
0 monitor Stop run test¦report¦both
0 +WAIT 42 monitor sleep test report both
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦both on 3.0››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'H' msgid:7 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.4 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 5d›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 -WAIT 39 monitor one_value test report up
0 monitor raw 2 test report up
0 monitor filter [2] on test¦report¦up
0 monitor End run test¦report¦up
NEW: ‹ConditionalWorkSequence:52 (4)›
   : │  id: 52
   : │  call count: 0
   : │  EVENT: monitor¦value¦2.0¦test¦report¦up
   : └1╴... done.
EVENT: monitor¦value¦2.0¦test¦report¦up
END: monitor¦value¦2.0¦test¦report¦up
0 monitor Stop run test¦report¦up
0 +WAIT 43 monitor sleep test report up
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦report¦up on 2.0››
0 msg states at run connected connected
0 -WAIT 40 monitor sleep test report down
0 monitor Start run test¦report¦down
0 +WAIT 44 monitor one_value test report down
0 -WAIT 43 monitor sleep test report up
0 +WAIT 45 monitor sleep test report up
0 -WAIT 42 monitor sleep test report both
0 +WAIT 46 monitor sleep test report both
0 -WAIT 46 monitor sleep test report both
0 monitor Start run test¦report¦both
0 +WAIT 47 monitor one_value test report both
0 -WAIT 45 monitor sleep test report up
0 monitor Start run test¦report¦up
0 +WAIT 48 monitor one_value test report up
0 wago recv '!3 PING 3'
0 msg recv msg ‹MsgIncoming: msg:'PING 3' msgid:3 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 3' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 3' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-3.8 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 5e›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 wago recv '!6 3'
0 msg recv msg ‹MsgIncoming: msg:'3' msgid:6 type:MT_IND prio:2›
0 wago recv '!4 2'
0 msg recv msg ‹MsgIncoming: msg:'2' msgid:4 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'3' msgid:6 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'3' msgid:6 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.0 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 5f›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 -WAIT 23 monitor one_value test count both
0 monitor raw 3 test count both
0 monitor filter [3] on test¦count¦both
0 monitor End run test¦count¦both
NEW: ‹ConditionalWorkSequence:53 (4)›
   : │  id: 53
   : │  call count: 0
   : │  EVENT: monitor¦value¦3.0¦test¦count¦both
   : └1╴... done.
EVENT: monitor¦value¦3.0¦test¦count¦both
END: monitor¦value¦3.0¦test¦count¦both
0 monitor Stop run test¦count¦both
0 +WAIT 49 monitor sleep test count both
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦both on 3.0››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'2' msgid:4 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'2' msgid:4 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.0 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 60›
0 -WAIT 19 monitor one_value test count up
0 monitor raw 2 test count up
0 monitor filter [2] on test¦count¦up
0 monitor End run test¦count¦up
NEW: ‹ConditionalWorkSequence:54 (4)›
   : │  id: 54
   : │  call count: 0
   : │  EVENT: monitor¦value¦2.0¦test¦count¦up
   : └1╴... done.
EVENT: monitor¦value¦2.0¦test¦count¦up
END: monitor¦value¦2.0¦test¦count¦up
0 monitor Stop run test¦count¦up
0 +WAIT 50 monitor sleep test count up
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦up on 2.0››
0 msg states at run connected connected
0 -WAIT 50 monitor sleep test count up
0 +WAIT 51 monitor sleep test count up
0 -WAIT 49 monitor sleep test count both
0 +WAIT 52 monitor sleep test count both
0 wago recv '!5 1'
0 msg recv msg ‹MsgIncoming: msg:'1' msgid:5 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'1' msgid:5 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'1' msgid:5 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.2 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 61›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up on 2.0››
0 -WAIT 21 monitor one_value test count down
0 monitor raw 1 test count down
0 monitor filter [1] on test¦count¦down
0 monitor End run test¦count¦down
NEW: ‹ConditionalWorkSequence:55 (4)›
   : │  id: 55
   : │  call count: 0
   : │  EVENT: monitor¦value¦1.0¦test¦count¦down
   : └1╴... done.
EVENT: monitor¦value¦1.0¦test¦count¦down
END: monitor¦value¦1.0¦test¦count¦down
0 monitor Stop run test¦count¦down
0 +WAIT 53 monitor sleep test count down
0 msg recv= RECV_AGAIN ‹WAGOmonRun ‹WAGOmon test¦count¦down on 1.0››
0 msg states at run connected connected
0 -WAIT 52 monitor sleep test count both
0 monitor Start run test¦count¦both
0 +WAIT 54 monitor one_value test count both
0 -WAIT 51 monitor sleep test count up
0 monitor Start run test¦count¦up
0 +WAIT 55 monitor one_value test count up
0 wago recv '!3 PING 4'
0 msg recv msg ‹MsgIncoming: msg:'PING 4' msgid:3 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 4' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 4' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.3 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 62›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down on 1.0››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 -WAIT 53 monitor sleep test count down
0 +WAIT 56 monitor sleep test count down
NEW: ‹ConditionalWorkSequence:56 (4)›
   : │  id: 56
   : │  call count: 0
   : │  EVENT: wait¦done¦6.6¦_wait¦10
   : └1╴... done.
EVENT: wait¦done¦6.6¦_wait¦10
END: wait¦done¦6.6¦_wait¦10
test count both :: Run ‹1.0 sec›
test count down :: Wait ‹now›
test count up :: Run ‹1.0 sec›
test report both :: Run ‹2.0 sec›
test report down :: Run ‹3.0 sec›
test report up :: Run ‹2.0 sec›
.
: ‹WAGOmon test¦count¦up run 1›
name: test¦count¦up
device: wago test 1 1
value: 2.0
up: Run
time: ‹1.0 sec›
steps: 1 / 1 / None
mode: count
timespec: 1
level: up
msgid: 4
last msg: monitor created
.
: ‹WAGOmon test¦count¦down on 1.0›
name: test¦count¦down
device: wago test 1 1
value: 1.0
up: Wait
time: ‹now›
steps: 1 / 1 / None
data: 1
mode: count
timespec: 1
level: down
msgid: 5
last msg: monitor created
.
: ‹WAGOmon test¦count¦both run 1›
name: test¦count¦both
device: wago test 1 1
value: 3.0
up: Run
time: ‹1.0 sec›
steps: 1 / 1 / None
mode: count
timespec: 1
level: both
msgid: 6
last msg: monitor created
.
: ‹WAGOmon test¦report¦up run 1›
name: test¦report¦up
device: wago test 1 1
value: 2.0
up: Run
time: ‹2.0 sec›
steps: 1 / 1 / None
mode: report
level: up
msgid: 7
last msg: monitor created
.
: ‹WAGOmon test¦report¦down run 1›
name: test¦report¦down
device: wago test 1 1
value: 1.0
up: Run
time: ‹3.0 sec›
steps: 1 / 1 / None
mode: report
level: down
msgid: 8
last msg: monitor created
.
: ‹WAGOmon test¦report¦both run 1›
name: test¦report¦both
device: wago test 1 1
value: 3.0
up: Run
time: ‹2.0 sec›
steps: 1 / 1 / None
mode: report
level: both
msgid: 9
last msg: monitor created
.
1 YesM 1.0 2.0 3.0
DEBUG> YesM 1.0 2.0 3.0
1 YesR 1.0 2.0 3.0
DEBUG> YesR 1.0 2.0 3.0
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 63 msgid=4›
0 wago send 'm- 4'
0 msg send result RECV_AGAIN
0 -WAIT 56 monitor sleep test count down
0 monitor Start run test¦count¦down
0 +WAIT 57 monitor one_value test count down
0 wago recv '!-4 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:4 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 4 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 4 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:4 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:4 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.5 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 64›
0 msg recv= NOT_MINE ‹WAGOmonStop 65 msgid=4›
0 +WAIT 58 kill job ‹WAGOmon test¦count¦up run 1›
0 -WAIT 55 monitor one_value test count up
0 monitor End run test¦count¦up
0 monitor Stop run test¦count¦up
0 +WAIT 59 monitor sleep test count up
0 -WAIT 59 monitor sleep test count up
NEW: ‹ConditionalWorkSequence:57 (4)›
   : │  id: 57
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦count¦up
   : └1╴... done.
EVENT: monitor¦stop¦test¦count¦up
END: monitor¦stop¦test¦count¦up
0 -WAIT 58 kill job ‹WAGOmon test¦count¦up run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦count¦up off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 4 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 4 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.7 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 66›
0 msg recv= MINE ‹WAGOmonStop 67 msgid=4›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 68 msgid=5›
0 wago send 'm- 5'
0 msg send result RECV_AGAIN
0 wago recv '!-5 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:5 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 5 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 5 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:5 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:5 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.7 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 69›
0 msg recv= NOT_MINE ‹WAGOmonStop 6a msgid=5›
0 +WAIT 60 kill job ‹WAGOmon test¦count¦down run 1›
0 -WAIT 57 monitor one_value test count down
0 monitor End run test¦count¦down
0 monitor Stop run test¦count¦down
0 +WAIT 61 monitor sleep test count down
0 wago recv '!3 PING 5'
0 msg recv msg ‹MsgIncoming: msg:'PING 5' msgid:3 type:MT_IND prio:2›
0 -WAIT 61 monitor sleep test count down
NEW: ‹ConditionalWorkSequence:58 (4)›
   : │  id: 58
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦count¦down
   : └1╴... done.
EVENT: monitor¦stop¦test¦count¦down
END: monitor¦stop¦test¦count¦down
0 -WAIT 60 kill job ‹WAGOmon test¦count¦down run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦count¦down off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 5 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 5 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 6b›
0 msg recv= MINE ‹WAGOmonStop 6c msgid=5›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 5' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 5' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.9 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 6d›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 6e msgid=6›
0 wago send 'm- 6'
0 msg send result RECV_AGAIN
0 wago recv '!-6 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:6 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 6 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 6 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:6 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:6 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-4.9 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 6f›
0 msg recv= NOT_MINE ‹WAGOmonStop 70 msgid=6›
0 +WAIT 62 kill job ‹WAGOmon test¦count¦both run 1›
0 -WAIT 54 monitor one_value test count both
0 monitor End run test¦count¦both
0 monitor Stop run test¦count¦both
0 +WAIT 63 monitor sleep test count both
0 -WAIT 63 monitor sleep test count both
NEW: ‹ConditionalWorkSequence:59 (4)›
   : │  id: 59
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦count¦both
   : └1╴... done.
EVENT: monitor¦stop¦test¦count¦both
END: monitor¦stop¦test¦count¦both
0 -WAIT 62 kill job ‹WAGOmon test¦count¦both run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦count¦both off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 6 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 6 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.1 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 71›
0 msg recv= MINE ‹WAGOmonStop 72 msgid=6›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 73 msgid=7›
0 wago send 'm- 7'
0 msg send result RECV_AGAIN
0 wago recv '!-7 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:7 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 7 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 7 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:7 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:7 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.1 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 74›
0 msg recv= NOT_MINE ‹WAGOmonStop 75 msgid=7›
0 +WAIT 64 kill job ‹WAGOmon test¦report¦up run 1›
0 -WAIT 48 monitor one_value test report up
0 monitor End run test¦report¦up
0 monitor Stop run test¦report¦up
0 +WAIT 65 monitor sleep test report up
0 wago recv '!3 PING 6'
0 msg recv msg ‹MsgIncoming: msg:'PING 6' msgid:3 type:MT_IND prio:2›
0 -WAIT 65 monitor sleep test report up
NEW: ‹ConditionalWorkSequence:60 (4)›
   : │  id: 60
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦report¦up
   : └1╴... done.
EVENT: monitor¦stop¦test¦report¦up
END: monitor¦stop¦test¦report¦up
0 -WAIT 64 kill job ‹WAGOmon test¦report¦up run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦report¦up off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 7 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 7 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 76›
0 msg recv= MINE ‹WAGOmonStop 77 msgid=7›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 6' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 6' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.3 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 78›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down run 1››
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 79 msgid=8›
0 wago send 'm- 8'
0 msg send result RECV_AGAIN
0 wago recv '!-8 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:8 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 8 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 8 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:8 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:8 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.3 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 7a›
0 msg recv= NOT_MINE ‹WAGOmonStop 7b msgid=8›
0 +WAIT 66 kill job ‹WAGOmon test¦report¦down run 1›
0 -WAIT 44 monitor one_value test report down
0 monitor End run test¦report¦down
0 monitor Stop run test¦report¦down
0 +WAIT 67 monitor sleep test report down
0 -WAIT 67 monitor sleep test report down
NEW: ‹ConditionalWorkSequence:61 (4)›
   : │  id: 61
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦report¦down
   : └1╴... done.
EVENT: monitor¦stop¦test¦report¦down
END: monitor¦stop¦test¦report¦down
0 -WAIT 66 kill job ‹WAGOmon test¦report¦down run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦report¦down off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 8 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 8 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.5 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 7c›
0 msg recv= MINE ‹WAGOmonStop 7d msgid=8›
0 msg recv= NOT_MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both run 1››
0 msg states at run connected connected
0 msg states at run connected connected
0 msg send ‹WAGOmonStop 7e msgid=9›
0 wago send 'm- 9'
0 msg send result RECV_AGAIN
0 wago recv '!-9 Deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Deleted.' msgid:9 type:MT_IND_NAK prio:2›
0 wago recv '+Monitor 9 deleted.'
0 msg recv msg ‹MsgIncoming: msg:'Monitor 9 deleted.' type:MT_ACK prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Deleted.' msgid:9 type:MT_IND_NAK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Deleted.' msgid:9 type:MT_IND_NAK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.5 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 7f›
0 msg recv= NOT_MINE ‹WAGOmonStop 80 msgid=9›
0 +WAIT 68 kill job ‹WAGOmon test¦report¦both run 1›
0 -WAIT 47 monitor one_value test report both
0 monitor End run test¦report¦both
0 monitor Stop run test¦report¦both
0 +WAIT 69 monitor sleep test report both
0 -WAIT 69 monitor sleep test report both
NEW: ‹ConditionalWorkSequence:62 (4)›
   : │  id: 62
   : │  call count: 0
   : │  EVENT: monitor¦stop¦test¦report¦both
   : └1╴... done.
EVENT: monitor¦stop¦test¦report¦both
END: monitor¦stop¦test¦report¦both
0 -WAIT 68 kill job ‹WAGOmon test¦report¦both run 1›
0 msg recv= MINE ‹WAGOmonRun ‹WAGOmon test¦report¦both off››
0 msg states at run connected connected
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'Monitor 9 deleted.' type:MT_ACK prio:2›
0 msg recv test ‹MsgIncoming: msg:'Monitor 9 deleted.' type:MT_ACK prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.7 sec id=2›
0 msg recv= NOT_MINE ‹WAGOkeepaliveMsg 81›
0 msg recv= MINE ‹WAGOmonStop 82 msgid=9›
0 msg states at run connected connected
0 +WAIT 70 start job ‹Waiter _wait¦11 ??›
0 -WAIT 70 start job ‹Waiter _wait¦11 ??›
NEW: ‹ConditionalWorkSequence:63 (4)›
   : │  id: 63
   : │  call count: 0
   : │  EVENT: wait¦start¦8.0¦_wait¦11
   : └1╴... done.
EVENT: wait¦start¦8.0¦_wait¦11
END: wait¦start¦8.0¦_wait¦11
0 wago recv '!3 PING 7'
0 msg recv msg ‹MsgIncoming: msg:'PING 7' msgid:3 type:MT_IND prio:2›
0 conn incoming WAGOqueue test ‹MsgIncoming: msg:'PING 7' msgid:3 type:MT_IND prio:2›
0 msg recv test ‹MsgIncoming: msg:'PING 7' msgid:3 type:MT_IND prio:2›
0 msg recv= NOT_MINE ‹WAGOtimedOutputRun 2:1 val=False tm=-5.8 sec id=2›
0 msg recv= RECV_AGAIN ‹WAGOkeepaliveMsg 83›
0 msg states at run connected connected
NEW: ‹ConditionalWorkSequence:64 (4)›
   : │  id: 64
   : │  call count: 0
   : │  EVENT: wait¦done¦8.0¦_wait¦11
   : └1╴... done.
EVENT: wait¦done¦8.0¦_wait¦11
END: wait¦done¦8.0¦_wait¦11
test :: wago localhost:59069
.
type: wago
host: localhost
port: 59069
.
test :: ‹WAGOqueue:test connected›
.
: ‹WAGOqueue:test connected›
name: test
queue: 0
state: connected
state since: -11.1 sec (2003-04-05 06:07:08)
sent: (17, 25)
received: (20, 48)
processed: (16, 25)
last_sent : ‹WAGOmonStop 84 msgid=9›
          priority: 2
          timeout: 2
          result: Monitor 9 deleted.
last_sent_at: -1.0 sec (2003-04-05 06:07:18.100000)
conn attempts: 0
conn timer: 3
out_queued: 0
channel type: wago
        host: localhost
        port: 59069
msg recv 2 1 : ‹WAGOtimedOutputRun 2:1 val=False tm=-5.8 sec id=2›
             priority: 2
             timeout: 2
             status: pending
             card: 2
             port: 1
             value: False
             timer: -5.8 sec
             id: 2
msg recv 2 2 : ‹WAGOkeepaliveMsg 85›
             priority: 2
             status: pending
             last: now
             id: 3
.
1 Yes
DEBUG> Yes
1 Yes
DEBUG> Yes
1 Yes
DEBUG> Yes
0 +WAIT 71 kill job ‹WAGOqueue:test connected›
0 -WAIT 71 kill job ‹WAGOqueue:test connected›
0 +WAIT 72 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 !got DOWN_EVENT test
NEW: ‹ConditionalWorkSequence:65 (4)›
   : │  id: 65
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test
   : └1╴... done.
EVENT: wago¦disconnect¦test
END: wago¦disconnect¦test
0 -WAIT 72 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test››
0 conn deleted WAGOqueue test
1 now we test a nonexistent port
DEBUG> now we test a nonexistent port
0 +WAIT 73 start job ‹WAGOqueue:test¦nonexist New›
0 -WAIT 73 start job ‹WAGOqueue:test¦nonexist New›
0 +WAIT 74 start job ‹WAGOqueue:test¦nonexist New›
0 -WAIT 74 start job ‹WAGOqueue:test¦nonexist New›
0 +WAIT 75 start job ‹Waiter poll¦nonexist ??›
0 -WAIT 75 start job ‹Waiter poll¦nonexist ??›
NEW: ‹ConditionalWorkSequence:66 (4)›
   : │  id: 66
   : │  call count: 0
   : │  EVENT: wait¦start¦9.0¦poll¦nonexist
   : └1╴... done.
EVENT: wait¦start¦9.0¦poll¦nonexist
END: wait¦start¦9.0¦poll¦nonexist
0 msg setstate init closed
0 msg setstate closed want
0 msg setstate want connecting
0 conn connecting WAGOqueue test¦nonexist
0 !got NOT_UP_EVENT test nonexist
NEW: ‹ConditionalWorkSequence:67 (4)›
   : │  id: 67
   : │  call count: 0
   : │  EVENT: wago¦error¦test¦nonexist
   : └1╴... done.
EVENT: wago¦error¦test¦nonexist
END: wago¦error¦test¦nonexist
4 Setting up
4 [Errno 111] Connection refused
ERROR> Setting up
ERROR> [Errno 111] Connection refused
0 msg setstate connecting waiting: wait 0.200000
0 msg setstate waiting want
0 msg setstate want connecting
0 conn connecting WAGOqueue test¦nonexist
0 !got NOT_UP_EVENT test nonexist
NEW: ‹ConditionalWorkSequence:68 (4)›
   : │  id: 68
   : │  call count: 0
   : │  EVENT: wago¦error¦test¦nonexist
   : └1╴... done.
EVENT: wago¦error¦test¦nonexist
END: wago¦error¦test¦nonexist
4 Setting up
4 [Errno 111] Connection refused
ERROR> Setting up
ERROR> [Errno 111] Connection refused
0 msg setstate connecting waiting: wait 0.320000
0 msg setstate waiting want
0 msg setstate want connecting
0 conn connecting WAGOqueue test¦nonexist
0 !got NOT_UP_EVENT test nonexist
NEW: ‹ConditionalWorkSequence:69 (4)›
   : │  id: 69
   : │  call count: 0
   : │  EVENT: wago¦error¦test¦nonexist
   : └1╴... done.
EVENT: wago¦error¦test¦nonexist
END: wago¦error¦test¦nonexist
4 Setting up
4 [Errno 111] Connection refused
ERROR> Setting up
ERROR> [Errno 111] Connection refused
0 msg setstate connecting waiting: wait 0.500000
NEW: ‹ConditionalWorkSequence:70 (4)›
   : │  id: 70
   : │  call count: 0
   : │  EVENT: wait¦done¦9.0¦poll¦nonexist
   : └1╴... done.
EVENT: wait¦done¦9.0¦poll¦nonexist
END: wait¦done¦9.0¦poll¦nonexist
: ‹WAGOqueue:test¦nonexist connecting›
name: test¦nonexist
queue: 0
state: connecting
state since: now (2003-04-05 06:07:19.100000)
sent: (0, 0)
received: (0, 0)
processed: (0, 0)
conn attempts: 3
conn timer: 0.5
out_queued: 0
.
0 +WAIT 76 kill job ‹WAGOqueue:test¦nonexist connecting›
0 -WAIT 76 kill job ‹WAGOqueue:test¦nonexist connecting›
1 now we test a port that always EOFs
DEBUG> now we test a port that always EOFs
0 +WAIT 77 start job ‹Async async›
0 -WAIT 77 start job ‹Async async›
0 +WAIT 78 start job ‹Waiter poll¦closing ??›
0 -WAIT 78 start job ‹Waiter poll¦closing ??›
NEW: ‹ConditionalWorkSequence:71 (4)›
   : │  id: 71
   : │  call count: 0
   : │  EVENT: wait¦start¦10.0¦poll¦closing
   : └1╴... done.
EVENT: wait¦start¦10.0¦poll¦closing
END: wait¦start¦10.0¦poll¦closing
0 +WAIT 79 start job ‹WAGOqueue:test¦closing New›
0 -WAIT 79 start job ‹WAGOqueue:test¦closing New›
0 +WAIT 80 start job ‹WAGOqueue:test¦closing New›
0 -WAIT 80 start job ‹WAGOqueue:test¦closing New›
0 msg setstate init closed
0 msg setstate closed want
0 msg setstate want connecting
0 conn connecting WAGOqueue test¦closing
0 +WAIT 81 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 -WAIT 81 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 conn setting up WAGOqueue test¦closing
0 conn connected WAGOqueue test¦closing
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 86›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 87›
0 !got DOWN_EVENT test closing
NEW: ‹ConditionalWorkSequence:72 (4)›
   : │  id: 72
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦closing
   : └1╴... done.
EVENT: wago¦disconnect¦test¦closing
END: wago¦disconnect¦test¦closing
0 conn ReOpen WAGOqueue test¦closing
0 msg setstate connecting waiting: wait 0.120000
0 msg setstate waiting want
0 msg setstate want connecting
0 wago Queue WAGOmonitorsMsg
0 conn connecting WAGOqueue test¦closing
0 +WAIT 82 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 -WAIT 82 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 conn setting up WAGOqueue test¦closing
0 conn connected WAGOqueue test¦closing
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 88›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 89›
0 !got DOWN_EVENT test closing
NEW: ‹ConditionalWorkSequence:73 (4)›
   : │  id: 73
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦closing
   : └1╴... done.
EVENT: wago¦disconnect¦test¦closing
END: wago¦disconnect¦test¦closing
0 conn ReOpen WAGOqueue test¦closing
0 msg setstate connecting waiting: wait 0.192000
0 msg setstate waiting want
0 msg setstate want connecting
0 wago Queue WAGOmonitorsMsg
0 conn connecting WAGOqueue test¦closing
0 +WAIT 83 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 -WAIT 83 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 conn setting up WAGOqueue test¦closing
0 conn connected WAGOqueue test¦closing
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 8a›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 8b›
0 !got DOWN_EVENT test closing
NEW: ‹ConditionalWorkSequence:74 (4)›
   : │  id: 74
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦closing
   : └1╴... done.
EVENT: wago¦disconnect¦test¦closing
END: wago¦disconnect¦test¦closing
0 conn ReOpen WAGOqueue test¦closing
0 msg setstate connecting waiting: wait 0.307200
0 msg setstate waiting want
0 msg setstate want connecting
0 wago Queue WAGOmonitorsMsg
0 conn connecting WAGOqueue test¦closing
0 +WAIT 84 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 -WAIT 84 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦closing››
0 conn setting up WAGOqueue test¦closing
0 conn connected WAGOqueue test¦closing
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 8c›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 8d›
0 !got DOWN_EVENT test closing
NEW: ‹ConditionalWorkSequence:75 (4)›
   : │  id: 75
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦closing
   : └1╴... done.
EVENT: wago¦disconnect¦test¦closing
END: wago¦disconnect¦test¦closing
0 conn ReOpen WAGOqueue test¦closing
0 msg setstate connecting waiting: wait 0.491520
NEW: ‹ConditionalWorkSequence:76 (4)›
   : │  id: 76
   : │  call count: 0
   : │  EVENT: wait¦done¦10.0¦poll¦closing
   : └1╴... done.
EVENT: wait¦done¦10.0¦poll¦closing
END: wait¦done¦10.0¦poll¦closing
: ‹WAGOqueue:test¦closing ReOpen›
name: test¦closing
queue: 0
state: ReOpen
state since: now (2003-04-05 06:07:19.100000)
sent: (0, 0)
received: (0, 0)
processed: (0, 0)
conn attempts: 4
conn timer: 0.5
out_queued: 1
msg send 1 1 : ‹WAGOmonitorsMsg 8e›
             priority: 1
             status: pending
msg recv 0 1 : ‹WAGOinitMsg 8f›
             priority: 0
.
0 +WAIT 85 kill job ‹WAGOqueue:test¦closing ReOpen›
0 -WAIT 85 kill job ‹WAGOqueue:test¦closing ReOpen›
1 now we test a port that does not answer
DEBUG> now we test a port that does not answer
0 +WAIT 86 start job ‹Async async›
0 -WAIT 86 start job ‹Async async›
0 +WAIT 87 start job ‹Waiter poll¦no_answer ??›
0 -WAIT 87 start job ‹Waiter poll¦no_answer ??›
NEW: ‹ConditionalWorkSequence:77 (4)›
   : │  id: 77
   : │  call count: 0
   : │  EVENT: wait¦start¦11.1¦poll¦no_answer
   : └1╴... done.
EVENT: wait¦start¦11.1¦poll¦no_answer
END: wait¦start¦11.1¦poll¦no_answer
0 +WAIT 88 start job ‹WAGOqueue:test¦no_answer New›
0 -WAIT 88 start job ‹WAGOqueue:test¦no_answer New›
0 +WAIT 89 start job ‹WAGOqueue:test¦no_answer New›
0 -WAIT 89 start job ‹WAGOqueue:test¦no_answer New›
0 msg setstate init closed
0 msg setstate closed want
0 msg setstate want connecting
0 conn connecting WAGOqueue test¦no_answer
0 +WAIT 90 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 -WAIT 90 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn setting up WAGOqueue test¦no_answer
0 conn connected WAGOqueue test¦no_answer
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 90›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 91›
0 +WAIT 91 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 !got DOWN_EVENT test no_answer
NEW: ‹ConditionalWorkSequence:78 (4)›
   : │  id: 78
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦no_answer
   : └1╴... done.
EVENT: wago¦disconnect¦test¦no_answer
END: wago¦disconnect¦test¦no_answer
0 -WAIT 91 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn ReOpen WAGOqueue test¦no_answer
0 msg setstate connecting waiting: wait 0.120000
0 msg setstate waiting want
0 msg setstate want connecting
0 wago Queue WAGOmonitorsMsg
0 conn connecting WAGOqueue test¦no_answer
0 +WAIT 92 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 -WAIT 92 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn setting up WAGOqueue test¦no_answer
0 conn connected WAGOqueue test¦no_answer
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 92›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 93›
0 +WAIT 93 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 !got DOWN_EVENT test no_answer
NEW: ‹ConditionalWorkSequence:79 (4)›
   : │  id: 79
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦no_answer
   : └1╴... done.
EVENT: wago¦disconnect¦test¦no_answer
END: wago¦disconnect¦test¦no_answer
0 -WAIT 93 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn ReOpen WAGOqueue test¦no_answer
0 msg setstate connecting waiting: wait 0.192000
0 msg setstate waiting want
0 msg setstate want connecting
0 wago Queue WAGOmonitorsMsg
0 conn connecting WAGOqueue test¦no_answer
0 +WAIT 94 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 -WAIT 94 start job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn setting up WAGOqueue test¦no_answer
0 conn connected WAGOqueue test¦no_answer
0 msg states at run connected connecting
0 NotConn [[], [], [], []]
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 94›
0 msg states at run connected connecting
0 msg blocked by ‹WAGOinitMsg 95›
0 +WAIT 95 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 !got DOWN_EVENT test no_answer
NEW: ‹ConditionalWorkSequence:80 (4)›
   : │  id: 80
   : │  call count: 0
   : │  EVENT: wago¦disconnect¦test¦no_answer
   : └1╴... done.
EVENT: wago¦disconnect¦test¦no_answer
END: wago¦disconnect¦test¦no_answer
0 -WAIT 95 kill job ‹WAGOchannel:‹Collected WAGOchannel_forwarder:test¦no_answer››
0 conn ReOpen WAGOqueue test¦no_answer
0 msg setstate connecting waiting: wait 0.307200
NEW: ‹ConditionalWorkSequence:81 (4)›
   : │  id: 81
   : │  call count: 0
   : │  EVENT: wait¦done¦11.1¦poll¦no_answer
   : └1╴... done.
EVENT: wait¦done¦11.1¦poll¦no_answer
END: wait¦done¦11.1¦poll¦no_answer
: ‹WAGOqueue:test¦no_answer ReOpen›
name: test¦no_answer
queue: 0
state: ReOpen
state since: now (2003-04-05 06:07:19.100000)
sent: (0, 0)
received: (0, 0)
processed: (0, 0)
conn attempts: 3
conn timer: 0.49152
out_queued: 1
msg send 1 1 : ‹WAGOmonitorsMsg 96›
             priority: 1
             status: pending
msg recv 0 1 : ‹WAGOinitMsg 97›
             priority: 0
.
0 +WAIT 96 kill job ‹WAGOqueue:test¦no_answer ReOpen›
0 -WAIT 96 kill job ‹WAGOqueue:test¦no_answer ReOpen›
0 +WAIT 97 start job ‹Waiter poll¦end ??›
0 -WAIT 97 start job ‹Waiter poll¦end ??›
NEW: ‹ConditionalWorkSequence:82 (4)›
   : │  id: 82
   : │  call count: 0
   : │  EVENT: wait¦start¦13.1¦poll¦end
   : └1╴... done.
EVENT: wait¦start¦13.1¦poll¦end
END: wait¦start¦13.1¦poll¦end
0 +WAIT 98 kill job <homevent.tokize.tokizer obj>
0 -WAIT 98 kill job <homevent.tokize.tokizer obj>
NEW: ‹ConditionalWorkSequence:83 (6)›
   : │  id: 83
   : │  call count: 0
   : │  EVENT: shutdown
   : └1╴... done.
EVENT: shutdown
NEW: ‹ConditionalWorkSequence:84 (4)›
   : │  id: 84
   : │  call count: 0
   : │  EVENT: module¦unload¦file
   : └1╴... done.
EVENT: module¦unload¦file
END: module¦unload¦file
NEW: ‹ConditionalWorkSequence:85 (4)›
   : │  id: 85
   : │  call count: 0
   : │  EVENT: module¦unload¦data
   : └1╴... done.
EVENT: module¦unload¦data
END: module¦unload¦data
NEW: ‹ConditionalWorkSequence:86 (4)›
   : │  id: 86
   : │  call count: 0
   : │  EVENT: module¦unload¦on_event
   : └1╴... done.
EVENT: module¦unload¦on_event
END: module¦unload¦on_event
NEW: ‹ConditionalWorkSequence:87 (4)›
   : │  id: 87
   : │  call count: 0
   : │  EVENT: module¦unload¦block
   : └1╴... done.
EVENT: module¦unload¦block
END: module¦unload¦block
NEW: ‹ConditionalWorkSequence:88 (4)›
   : │  id: 88
   : │  call count: 0
   : │  EVENT: module¦unload¦logging
   : └1╴... done.
EVENT: module¦unload¦logging
END: module¦unload¦logging
NEW: ‹ConditionalWorkSequence:89 (4)›
   : │  id: 89
   : │  call count: 0
   : │  EVENT: module¦unload¦wait
   : └1╴... done.
EVENT: module¦unload¦wait
END: module¦unload¦wait
NEW: ‹ConditionalWorkSequence:90 (4)›
   : │  id: 90
   : │  call count: 0
   : │  EVENT: module¦unload¦wago
   : └1╴... done.
EVENT: module¦unload¦wago
END: module¦unload¦wago
NEW: ‹ConditionalWorkSequence:91 (4)›
   : │  id: 91
   : │  call count: 0
   : │  EVENT: module¦unload¦monitor
   : └1╴... done.
EVENT: module¦unload¦monitor
END: module¦unload¦monitor
NEW: ‹ConditionalWorkSequence:92 (4)›
   : │  id: 92
   : │  call count: 0
   : │  EVENT: module¦unload¦ifelse
   : └1╴... done.
EVENT: module¦unload¦ifelse
END: module¦unload¦ifelse
NEW: ‹ConditionalWorkSequence:93 (4)›
   : │  id: 93
   : │  call count: 0
   : │  EVENT: module¦unload¦trigger
   : └1╴... done.
EVENT: module¦unload¦trigger
END: module¦unload¦trigger
NEW: ‹ConditionalWorkSequence:94 (4)›
   : │  id: 94
   : │  call count: 0
   : │  EVENT: module¦unload¦path
   : └1╴... done.
EVENT: module¦unload¦path
END: module¦unload¦path
NEW: ‹ConditionalWorkSequence:95 (4)›
   : │  id: 95
   : │  call count: 0
   : │  EVENT: module¦unload¦bool
   : └1╴... done.
EVENT: module¦unload¦bool
END: module¦unload¦bool
END: shutdown
