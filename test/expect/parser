1 EVENT: startup
NEW: <ConditionalWorkSequence:1 (4)>
   : │  EVENT: startup
   : └1╴... done.
1 EVENT: startup
1 END: startup
Init ('foo',)(1) from ‹global_words ('Global',) 3›
Input ('foo',)(1): ⌁.
Init ('foo',)(2) from ‹global_words ('Global',) 3›
Input ('foo',)(2): ⌁.baz
Init ('foo', 'bar')(3) from ‹global_words ('Global',) 3›
Input ('foo', 'bar')(3): ⌁.
Init ('foo', 'bar')(4) from ‹global_words ('Global',) 3›
Input ('foo', 'bar')(4): ⌁.baz
Init ('foo', 'bar')(5) from Ctx(Ctx({'out': <test.logwrite obj>}),{'words': ‹global_words ('Global',) 3›})
InputComplex ('foo', 'bar')(5): foo¦bar¦baz¦quux
Init ('what',)(6) from ‹BarHandler ('foo', 'bar') 2 (5)›
Input ('what',)(6): ⌁.ever
Init ('for',)(7) from Ctx(Ctx(Ctx({'out': <test.logwrite obj>}),{'words': ‹global_words ('Global',) 3›}),{'words': ‹BarHandler ('foo', 'bar') 2 (5)›})
InputComplex ('for',)(7): for¦ever¦and¦ever
Init ('foiled',)(8) from ‹ForHandler ('for',) 1 (7)›
Input ('foiled',)(8): ⌁.again
... moving up
Init ('what',)(9) from ‹BarHandler ('foo', 'bar') 2 (5)›
Input ('what',)(9): ⌁.else
... moving up
Init ('foo',)(10) from ‹global_words ('Global',) 3›
Input ('foo',)(10): ⌁.again
Global : word list:
Known words:
conditions : List of conditions you can use in 'if' statements.
exit       : stop processing input
foo        : We foo around.
foo bar    : Have a bar, man!
help       : show doc texts
shutdown   : stops executing the program.
help:
The "help" command shows which words are recognized at each level.
"help foo" also shows the sub-commands, i.e. what would be allowed
in place of the "XXX" in the following statement:

	foo:
		XXX

Statements may be multi-word and follow generic Python syntax.
foo : We foo around.
Not a command: baz
foo : We foo around.
foo bar : Have a bar, man!
Known words:
for  : for you!
what : What is this?
for : for you!
Known words:
foiled : not clingfilm
foiled : not clingfilm
... moving up
2 EVENT: shutdown
NEW: <ConditionalWorkSequence:2 (5)>
   : │  EVENT: shutdown
   : └1╴... done.
2 EVENT: shutdown
2 END: shutdown
