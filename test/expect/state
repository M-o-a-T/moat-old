NEW: <WorkSequence:1 (4)>
   : │  EVENT: startup
   : └1╴... done.
1 EVENT: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
1 END: startup
RUN: <WorkSequence:1 (4)>
 ev: EVENT: startup
0 add ‹IfStatement ⌁.if¦exists¦state¦foo¦bar›
0 add ‹LogHandler ⌁.log¦TRACE¦No‽›
0 add ‹LogHandler ⌁.log¦TRACE¦Yes!›
0 Yes!
0 Set to ONE
NEW: <WorkSequence:2 (4)>
   : │  EVENT: state¦-¦one¦foo¦bar
   : └1╴... done.
20 EVENT: state¦-¦one¦foo¦bar
RUN: <WorkSequence:2 (4)>
 ev: EVENT: state¦-¦one¦foo¦bar
20 END: state¦-¦one¦foo¦bar
RUN: <WorkSequence:2 (4)>
 ev: EVENT: state¦-¦one¦foo¦bar
0 Set to TWO
NEW: <WorkSequence:3 (4)>
   : │  EVENT: state¦one¦two¦foo¦bar
   : └1╴... done.
31 EVENT: state¦one¦two¦foo¦bar
RUN: <WorkSequence:3 (4)>
 ev: EVENT: state¦one¦two¦foo¦bar
31 END: state¦one¦two¦foo¦bar
RUN: <WorkSequence:3 (4)>
 ev: EVENT: state¦one¦two¦foo¦bar
0 Create OnEvtHandler: ['state', '*', 'three', 'foo', 'bar']
0 add ‹LogHandler ⌁.log¦TRACE¦Set¦to¦FOUR›
0 add ‹SetStateHandler ⌁.set¦state¦four¦foo¦bar›
0 NewHandler 1
0 add ‹LogHandler ⌁.log¦TRACE¦Set¦to¦THREE›
0 add ‹SetStateHandler ⌁.set¦state¦three¦foo¦bar›
NEW: <WorkSequence:4 (4)>
   : │  EVENT: wait¦start¦1049515628.1¦_wait¦1
   : └1╴... done.
47 EVENT: wait¦start¦1049515628.1¦_wait¦1
RUN: <WorkSequence:4 (4)>
 ev: EVENT: wait¦start¦1049515628.1¦_wait¦1
47 END: wait¦start¦1049515628.1¦_wait¦1
RUN: <WorkSequence:4 (4)>
 ev: EVENT: wait¦start¦1049515628.1¦_wait¦1
0 Set to THREE
NEW: <WorkSequence:5 (5)>
   : │  EVENT: state¦two¦three¦foo¦bar
   : ├1╴on state * three foo bar ‹OnEventHandler›
   : │  prio: 51
   : │  step: log TRACE Set to FOUR ‹LogHandler›
   : │  step: set state four foo bar ‹SetStateHandler›
   : └2╴... done.
56 EVENT: state¦two¦three¦foo¦bar
RUN: <WorkSequence:5 (5)>
 ev: EVENT: state¦two¦three¦foo¦bar
RUN: on state * three foo bar ‹OnEventHandler›
   : prio: 51
   : step: log TRACE Set to FOUR ‹LogHandler›
   : step: set state four foo bar ‹SetStateHandler›
 at: <WorkSequence:5 (5)> (step 1)
 ev: EVENT: state¦two¦three¦foo¦bar
0 Set to FOUR
NEW: <WorkSequence:6 (4)>
   : │  ERROR: Trying to change state to 'four' while changing from 'two' to 'three'
   : └1╴... done.
ERROR: Traceback (most recent call last):
     :   File "modules/on_event.py, in process
     :     return super(OnEventHandler,self).run(ctx,**k)
     :   File "homevent/statement.py, in run
     :     d.callback(None)
     :   File "homevent/twist.py, in acb
     :     self._startRunCallbacks(result)
     :   File "internet/defer.py, in _startRunCallbacks
     :     self._runCallbacks()
     : --- <exception caught here> ---
     :   File "internet/defer.py, in _runCallbacks
     :     self.result = callback(self.result, *args, **kw)
     :   File "homevent/statement.py, in go
     :     return p.run(ctx)
     :   File "modules/state.py, in run
     :     raise StateChangeError(s,value)
     : __builtin__.StateChangeError: Trying to change state to 'four' while changing from 'two' to 'three'
   in: on state * three foo bar ‹OnEventHandler›
     : prio: 51
     : step: log TRACE Set to FOUR ‹LogHandler›
     : step: set state four foo bar ‹SetStateHandler›
   in: <WorkSequence:5 (5)>
     : │  EVENT: state¦two¦three¦foo¦bar
     : ╞1╕on state * three foo bar ‹OnEventHandler›
     : │ │prio: 51
     : │ │step: log TRACE Set to FOUR ‹LogHandler›
     : │ ╵step: set state four foo bar ‹SetStateHandler›
     : └2╴... done.
RUN: <WorkSequence:6 (4)>
 ev: ERROR: Trying to change state to 'four' while changing from 'two' to 'three'
67 END: StateChangeError
RUN: <WorkSequence:6 (4)>
 ev: ERROR: Trying to change state to 'four' while changing from 'two' to 'three'
56 END: state¦two¦three¦foo¦bar
RUN: <WorkSequence:5 (5)> (step 1)
 ev: EVENT: state¦two¦three¦foo¦bar
NEW: <WorkSequence:7 (4)>
   : │  EVENT: wait¦done¦1049515628.1¦_wait¦1
   : └1╴... done.
72 EVENT: wait¦done¦1049515628.1¦_wait¦1
RUN: <WorkSequence:7 (4)>
 ev: EVENT: wait¦done¦1049515628.1¦_wait¦1
72 END: wait¦done¦1049515628.1¦_wait¦1
RUN: <WorkSequence:7 (4)>
 ev: EVENT: wait¦done¦1049515628.1¦_wait¦1
foo bar = three
.
Name: foo bar
Value: three
Last Value: two
0 add ‹IfStatement ⌁.if¦state¦three¦foo¦bar›
0 add ‹LogHandler ⌁.log¦TRACE¦Yes!›
0 add ‹LogHandler ⌁.log¦TRACE¦No‽›
0 Yes!
0 add ‹IfStatement ⌁.if¦exists¦state¦foo¦bar›
0 add ‹LogHandler ⌁.log¦TRACE¦Yes!›
0 add ‹LogHandler ⌁.log¦TRACE¦No‽›
0 Yes!
0 add ‹IfStatement ⌁.if¦last¦state¦two¦foo¦bar›
0 add ‹LogHandler ⌁.log¦TRACE¦Yes!›
0 add ‹LogHandler ⌁.log¦TRACE¦No‽›
0 Yes!
0 Create OnEvtHandler: ['whatever']
0 add ‹VarStateHandler ⌁.var¦state¦x¦foo¦bar›
0 add ‹LogHandler ⌁.log¦TRACE¦We¦got¦$x›
0 NewHandler 2
NEW: <WorkSequence:8 (5)>
   : │  EVENT: whatever
   : ├1╴on whatever ‹OnEventHandler›
   : │  prio: 51
   : │  step: var state x foo bar ‹VarStateHandler›
   : │  step: log TRACE We got $x ‹LogHandler›
   : └2╴... done.
110 EVENT: whatever
RUN: <WorkSequence:8 (5)>
 ev: EVENT: whatever
RUN: on whatever ‹OnEventHandler›
   : prio: 51
   : step: var state x foo bar ‹VarStateHandler›
   : step: log TRACE We got $x ‹LogHandler›
 at: <WorkSequence:8 (5)> (step 1)
 ev: EVENT: whatever
0 We got three
110 END: whatever
RUN: <WorkSequence:8 (5)> (step 1)
 ev: EVENT: whatever
NEW: <WorkSequence:9 (4)>
   : │  EVENT: state¦three¦-¦foo¦bar
   : └1╴... done.
122 EVENT: state¦three¦-¦foo¦bar
RUN: <WorkSequence:9 (4)>
 ev: EVENT: state¦three¦-¦foo¦bar
122 END: state¦three¦-¦foo¦bar
RUN: <WorkSequence:9 (4)>
 ev: EVENT: state¦three¦-¦foo¦bar
.
NEW: <WorkSequence:10 (5)>
   : │  EVENT: shutdown
   : └1╴... done.
2 EVENT: shutdown
RUN: <WorkSequence:10 (5)>
 ev: EVENT: shutdown
2 END: shutdown
RUN: shutting down
 at: <WorkSequence:10 (5)>
 ev: EVENT: shutdown
RUN: <WorkSequence:10 (5)>
 ev: EVENT: shutdown
