NEW: ‹ConditionalWorkSequence:5 (2)›
   : │  id: 5
   : │  call count: 0
   : │  EVENT: startup
   : │       : startup=True
   : └1╴... done.
EVENT: startup
     : startup=True
END: startup
TRACE Create OnEvtHandler: fuß
TRACE NewHandler 6
TRACE Create OnEvtHandler: num¦1
TRACE NewHandler 7
TRACE Create OnEvtHandler: num¦2
TRACE NewHandler 8
TRACE Create OnEvtHandler: num¦3
TRACE NewHandler 9
TRACE Create OnEvtHandler: foo
TRACE NewHandler 10
TRACE Create OnEvtHandler: foo
TRACE NewHandler 11
TRACE Create OnEvtHandler: foo
TRACE NewHandler 12
TRACE Create OnEvtHandler: bar¦*
TRACE NewHandler 13
Another Handler :: foo (51)
Num2Txt :: num¦2 (51)
Schau auf deine Füße :: fuß (51)
Skipped One :: foo (51)
Skipped Two :: foo (51)
Txt2Num :: num¦1 (51)
_on 13 :: bar¦* (51)
num2num :: num¦3 (51)
.
: ⇒OnEventWorker:Skipped¦One
name: Skipped¦One
id: 10
prio: 51
pname: Skipped One
args: foo
prio: 51
.
: ⇒OnEventWorker:Skipped¦Two
name: Skipped¦Two
id: 11
prio: 51
pname: Skipped Two
args: foo
prio: 51
.
NEW: ‹ConditionalWorkSequence:14 (3)›
   : │  id: 14
   : │  call count: 0
   : │  IEVENT: bar¦foo
   : ├1╴on bar * ‹OnEventHandler›
   : │  prio: 51
   : │  step: block ‹Block›
   : │      : step: trigger $1 ‹TriggerHandler›
   : └2╴... done.
IEVENT: bar¦foo
RUN: on bar * ‹OnEventHandler›
   : prio: 51
   : step: block ‹Block›
   :     : step: trigger $1 ‹TriggerHandler›
 at: ‹ConditionalWorkSequence:14 (3)› (step 1)
 ev: IEVENT: bar¦foo
NEW: ‹ConditionalWorkSequence:15 (5)›
   : │  id: 15
   : │  call count: 0
   : │  IEVENT: foo
   : ├1╴on foo ‹OnEventHandler›
   : │  name: Skipped One
   : │  prio: 51
   : │  step: if false ‹IfStatement›
   : │  step: log ERROR This should not be executed ‹LogHandler›
   : ├2╴on foo ‹OnEventHandler›
   : │  name: Skipped Two
   : │  prio: 51
   : │  step: if true ‹IfStatement›
   : │      : step: exit handler ‹OnSkip2›
   : │  step: log ERROR This should also not be executed ‹LogHandler›
   : ├3╴on foo ‹OnEventHandler›
   : │  name: Another Handler
   : │  prio: 51
   : │  step: log DEBUG This is logged once ‹LogHandler›
   : └4╴... done.
IEVENT: foo
RUN: on foo ‹OnEventHandler›
   : name: Skipped One
   : prio: 51
   : step: if false ‹IfStatement›
   : step: log ERROR This should not be executed ‹LogHandler›
 at: ‹ConditionalWorkSequence:15 (5)› (step 1)
 ev: IEVENT: foo
RUN: on foo ‹OnEventHandler›
   : name: Skipped Two
   : prio: 51
   : step: if true ‹IfStatement›
   :     : step: exit handler ‹OnSkip2›
   : step: log ERROR This should also not be executed ‹LogHandler›
 at: ‹ConditionalWorkSequence:15 (5)› (step 2)
 ev: IEVENT: foo
RUN: on foo ‹OnEventHandler›
   : name: Another Handler
   : prio: 51
   : step: log DEBUG This is logged once ‹LogHandler›
 at: ‹ConditionalWorkSequence:15 (5)› (step 3)
 ev: IEVENT: foo
DEBUG This is logged once
END: foo
END: bar¦foo
NEW: ‹ConditionalWorkSequence:16 (3)›
   : │  id: 16
   : │  call count: 0
   : │  IEVENT: bar¦foo
   : ├1╴on bar * ‹OnEventHandler›
   : │  prio: 51
   : │  step: block ‹Block›
   : │      : step: trigger $1 ‹TriggerHandler›
   : └2╴... done.
IEVENT: bar¦foo
RUN: on bar * ‹OnEventHandler›
   : prio: 51
   : step: block ‹Block›
   :     : step: trigger $1 ‹TriggerHandler›
 at: ‹ConditionalWorkSequence:16 (3)› (step 1)
 ev: IEVENT: bar¦foo
NEW: ‹ConditionalWorkSequence:17 (4)›
   : │  id: 17
   : │  call count: 0
   : │  IEVENT: foo
   : ├1╴on foo ‹OnEventHandler›
   : │  name: Skipped One
   : │  prio: 51
   : │  step: if false ‹IfStatement›
   : │  step: log ERROR This should not be executed ‹LogHandler›
   : ├2╴on foo ‹OnEventHandler›
   : │  name: Skipped Two
   : │  prio: 51
   : │  step: if true ‹IfStatement›
   : │      : step: exit handler ‹OnSkip2›
   : │  step: log ERROR This should also not be executed ‹LogHandler›
   : └3╴... done.
IEVENT: foo
RUN: on foo ‹OnEventHandler›
   : name: Skipped One
   : prio: 51
   : step: if false ‹IfStatement›
   : step: log ERROR This should not be executed ‹LogHandler›
 at: ‹ConditionalWorkSequence:17 (4)› (step 1)
 ev: IEVENT: foo
RUN: on foo ‹OnEventHandler›
   : name: Skipped Two
   : prio: 51
   : step: if true ‹IfStatement›
   :     : step: exit handler ‹OnSkip2›
   : step: log ERROR This should also not be executed ‹LogHandler›
 at: ‹ConditionalWorkSequence:17 (4)› (step 2)
 ev: IEVENT: foo
END: foo
END: bar¦foo
Num2Txt :: num¦2 (51)
Skipped One :: foo (51)
Skipped Two :: foo (51)
Txt2Num :: num¦1 (51)
_on 13 :: bar¦* (51)
num2num :: num¦3 (51)
.
NEW: ‹ConditionalWorkSequence:18 (2)›
   : │  id: 18
   : │  call count: 0
   : │  IEVENT: fuß
   : └1╴... done.
IEVENT: fuß
END: fuß
NEW: ‹ConditionalWorkSequence:19 (3)›
   : │  id: 19
   : │  call count: 0
   : │  IEVENT: num¦1
   : ├1╴on num 1 ‹OnEventHandler›
   : │  name: Txt2Num
   : │  prio: 51
   : │  step: do nothing ‹DoNothingHandler›
   : └2╴... done.
IEVENT: num¦1
RUN: on num 1 ‹OnEventHandler›
   : name: Txt2Num
   : prio: 51
   : step: do nothing ‹DoNothingHandler›
 at: ‹ConditionalWorkSequence:19 (3)› (step 1)
 ev: IEVENT: num¦1
END: num¦1
NEW: ‹ConditionalWorkSequence:20 (3)›
   : │  id: 20
   : │  call count: 0
   : │  IEVENT: num¦2
   : ├1╴on num 2 ‹OnEventHandler›
   : │  name: Num2Txt
   : │  prio: 51
   : │  step: do nothing ‹DoNothingHandler›
   : └2╴... done.
IEVENT: num¦2
RUN: on num 2 ‹OnEventHandler›
   : name: Num2Txt
   : prio: 51
   : step: do nothing ‹DoNothingHandler›
 at: ‹ConditionalWorkSequence:20 (3)› (step 1)
 ev: IEVENT: num¦2
END: num¦2
NEW: ‹ConditionalWorkSequence:21 (3)›
   : │  id: 21
   : │  call count: 0
   : │  IEVENT: num¦3
   : ├1╴on num 3 ‹OnEventHandler›
   : │  name: num2num
   : │  prio: 51
   : │  step: do nothing ‹DoNothingHandler›
   : └2╴... done.
IEVENT: num¦3
RUN: on num 3 ‹OnEventHandler›
   : name: num2num
   : prio: 51
   : step: do nothing ‹DoNothingHandler›
 at: ‹ConditionalWorkSequence:21 (3)› (step 1)
 ev: IEVENT: num¦3
END: num¦3
